-- ===================================================================
-- before run test case, please setup odbc.init odbcinst.ini as following
-- export LD_LIBRARY_PATH=/usr/local/pgsql/lib
--cat /etc/odbc.ini 
---------------------------------------------
--|[REMOTE_PG]                              |
--|Driver = PostgreSQL                      |
--|Description = Test on PostgreSQL         |
--|Database = postgres                      |
--|Servername = 127.0.0.1                   |
--|UserName = pgsql                         |
--|Port = 65432                              |
---------------------------------------------
-- cat /etc/odbcinst.ini 
--------------------------------------------------------|
--|[ODBC]                                               |
--|Trace = yes                                          |
--|TraceFile = /tmp/unixODBC_sql.log                    |
--|# Driver from the postgresql-odbc package            |
--|# Setup from the unixODBC package                    |
--|[PostgreSQL]                                         |
--|Description	= ODBC for PostgreSQL                   |
--|Driver	        = /usr/local/lib/psqlodbca.so   |
--|Setup		= /usr/local/lib/psqlodbcw.so   |
--|FileUsage	= 1                                     |
--------------------------------------------------------|
-- create FDW objects
-- ===================================================================
CREATE EXTENSION odbc_fdw;
CREATE SERVER testserver1 FOREIGN DATA WRAPPER odbc_fdw OPTIONS (dsn 'REMOTE_PG');
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER loopback FOREIGN DATA WRAPPER odbc_fdw
            OPTIONS (dsn 'REMOTE_PG')$$;
        EXECUTE $$CREATE SERVER loopback2 FOREIGN DATA WRAPPER odbc_fdw
            OPTIONS (dsn 'REMOTE_PG')$$;
    END;
$d$;
CREATE USER MAPPING FOR public SERVER testserver1
        OPTIONS (odbc_UID 'value', odbc_PWD 'value');
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback OPTIONS (odbc_UID 'pgsql', odbc_PWD '');
CREATE USER MAPPING FOR CURRENT_USER SERVER loopback2 OPTIONS (odbc_UID 'pgsql', odbc_PWD '');
-- ===================================================================
-- create objects used through FDW loopback server
-- ===================================================================
CREATE SCHEMA "S 1";
CREATE TABLE "S 1"."T 1" (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10),
	CONSTRAINT t1_pkey PRIMARY KEY (c1)
);
CREATE TABLE "S 1"."T 2" (
	c1 int NOT NULL,
	c2 text,
	CONSTRAINT t2_pkey PRIMARY KEY (c1)
);
CREATE TABLE "S 1"."T 3" (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	CONSTRAINT t3_pkey PRIMARY KEY (c1)
);
CREATE TABLE "S 1"."T 4" (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	CONSTRAINT t4_pkey PRIMARY KEY (c1)
);
INSERT INTO "S 1"."T 1"
	SELECT id,
	       id % 10,
	       to_char(id, 'FM00000'),
	       '1970-01-01'::timestamptz + ((id % 100) || ' days')::interval,
	       '1970-01-01'::timestamp + ((id % 100) || ' days')::interval,
	       id % 10,
	       id % 10
	FROM generate_series(1, 1000) id;
INSERT INTO "S 1"."T 2"
	SELECT id,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
INSERT INTO "S 1"."T 3"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
DELETE FROM "S 1"."T 3" WHERE c1 % 2 != 0;	-- delete for outer join tests
INSERT INTO "S 1"."T 4"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
DELETE FROM "S 1"."T 4" WHERE c1 % 3 != 0;	-- delete for outer join tests
ANALYZE "S 1"."T 1";
ANALYZE "S 1"."T 2";
ANALYZE "S 1"."T 3";
ANALYZE "S 1"."T 4";
-- ===================================================================
-- create foreign tables
-- ===================================================================
CREATE FOREIGN TABLE ft1 (
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1'
) SERVER loopback;
ALTER FOREIGN TABLE ft1 DROP COLUMN c0;
CREATE FOREIGN TABLE ft2 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	cx int,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2'
) SERVER loopback;
ALTER FOREIGN TABLE ft2 DROP COLUMN cx;
CREATE FOREIGN TABLE ft4 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback OPTIONS (schema 'S 1', table 'T 3');
CREATE FOREIGN TABLE ft5 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback OPTIONS (schema 'S 1', table 'T 4');
CREATE FOREIGN TABLE ft6 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER loopback2 OPTIONS (schema 'S 1', table 'T 4');
-- ===================================================================
-- tests for validator
-- ===================================================================
-- requiressl, krbsrvname and gsslib are omitted because they depend on
-- configure options
ALTER SERVER testserver1 OPTIONS (
	use_remote_estimate 'false',
	updatable 'true',
	fdw_startup_cost '123.456',
	fdw_tuple_cost '0.123',
	service 'value',
	connect_timeout 'value',
	dbname 'value',
	host 'value',
	hostaddr 'value',
	port 'value',
	--client_encoding 'value',
	application_name 'value',
	--fallback_application_name 'value',
	keepalives 'value',
	keepalives_idle 'value',
	keepalives_interval 'value',
	-- requiressl 'value',
	sslcompression 'value',
	sslmode 'value',
	sslcert 'value',
	sslkey 'value',
	sslrootcert 'value',
	sslcrl 'value'
	--requirepeer 'value',
	-- krbsrvname 'value',
	-- gsslib 'value',
	--replication 'value'
);
ERROR:  invalid option "use_remote_estimate"
HINT:  Valid options in this context are: dsn, driver, encoding, updatable
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (DROP odbc_UID, DROP odbc_PWD);
ALTER FOREIGN TABLE ft1 OPTIONS (schema 'S 1', table 'T 1');
ALTER FOREIGN TABLE ft2 OPTIONS (schema 'S 1', table 'T 1');
\det+
                          List of foreign tables
 Schema | Table |  Server   |          FDW Options          | Description 
--------+-------+-----------+-------------------------------+-------------
 public | ft1   | loopback  | (schema 'S 1', "table" 'T 1') | 
 public | ft2   | loopback  | (schema 'S 1', "table" 'T 1') | 
 public | ft4   | loopback  | (schema 'S 1', "table" 'T 3') | 
 public | ft5   | loopback  | (schema 'S 1', "table" 'T 4') | 
 public | ft6   | loopback2 | (schema 'S 1', "table" 'T 4') | 
(5 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

-- Test that alteration of user mapping options causes reconnection
ALTER USER MAPPING FOR CURRENT_USER SERVER loopback
  OPTIONS (ADD odbc_UID 'no such user');
ERROR:  option "odbc_uid" provided more than once
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

ALTER USER MAPPING FOR CURRENT_USER SERVER loopback
  OPTIONS (DROP odbc_UID);
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

\set VERBOSITY default
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
        QUERY PLAN         
---------------------------
 Limit
   ->  Foreign Scan on ft1
(2 rows)

SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     
-----+----+-------+------------------------------+--------------------------+----+------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2         
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3         
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4         
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5         
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7         
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8         
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9         
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0         
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, tableoid
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, tableoid
               Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
(8 rows)

SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     
-----+----+-------+------------------------------+--------------------------+----+------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2         
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3         
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4         
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5         
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7         
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8         
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9         
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0         
(10 rows)

-- whole-row reference
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: t1.*, c3, c1
   ->  Foreign Scan on public.ft1 t1
         Output: t1.*, c3, c1
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" ORDER BY c3 ASC, c1 ASC
(5 rows)

SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                           t1                                           
----------------------------------------------------------------------------------------
 (101,1,00101,"Fri Jan 02 00:00:00 1970 PST","Fri Jan 02 00:00:00 1970",1,"1         ")
 (102,2,00102,"Sat Jan 03 00:00:00 1970 PST","Sat Jan 03 00:00:00 1970",2,"2         ")
 (103,3,00103,"Sun Jan 04 00:00:00 1970 PST","Sun Jan 04 00:00:00 1970",3,"3         ")
 (104,4,00104,"Mon Jan 05 00:00:00 1970 PST","Mon Jan 05 00:00:00 1970",4,"4         ")
 (105,5,00105,"Tue Jan 06 00:00:00 1970 PST","Tue Jan 06 00:00:00 1970",5,"5         ")
 (106,6,00106,"Wed Jan 07 00:00:00 1970 PST","Wed Jan 07 00:00:00 1970",6,"6         ")
 (107,7,00107,"Thu Jan 08 00:00:00 1970 PST","Thu Jan 08 00:00:00 1970",7,"7         ")
 (108,8,00108,"Fri Jan 09 00:00:00 1970 PST","Fri Jan 09 00:00:00 1970",8,"8         ")
 (109,9,00109,"Sat Jan 10 00:00:00 1970 PST","Sat Jan 10 00:00:00 1970",9,"9         ")
 (110,0,00110,"Sun Jan 11 00:00:00 1970 PST","Sun Jan 11 00:00:00 1970",0,"0         ")
(10 rows)

-- empty result
SELECT * FROM ft1 WHERE false;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+----+----+----+----+----+----
(0 rows)

-- with WHERE clause
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c7 >= '1')) AND ((c1 = 101)) AND ((c6 = '1'))
(3 rows)

SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     
-----+----+-------+------------------------------+--------------------------+----+------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
(1 row)

-- with FOR UPDATE/SHARE
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 LockRows
   Output: c1, c2, c3, c4, c5, c6, c7, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, t1.*
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = 101)) FOR UPDATE
(5 rows)

SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     
-----+----+-------+------------------------------+--------------------------+----+------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
(1 row)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 LockRows
   Output: c1, c2, c3, c4, c5, c6, c7, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, t1.*
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = 102)) FOR SHARE
(5 rows)

SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     
-----+----+-------+------------------------------+--------------------------+----+------------
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2         
(1 row)

-- aggregate
SELECT COUNT(*) FROM ft1 t1;
 count 
-------
  1000
(1 row)

-- subquery
SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----+----+-------+------------------------------+--------------------------+----+------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2         
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3         
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4         
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5         
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7         
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8         
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9         
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0         
(10 rows)

-- subquery+MAX
SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c3) FROM ft2 t2) ORDER BY c1;
ERROR:  ERROR: there is no parameter $1;
Error while executing the query
-- used in CTE
WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c3, t2.c4 FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 |  c3   |              c4              
----+----+-------+------------------------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST
(10 rows)

-- fixed values
SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column? 
----------+----------
 fixed    | 
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
SET enable_hashjoin TO false;
SET enable_nestloop TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2.c1 FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2.c1) OFFSET 100 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Merge Join
         Output: t1.c1, t2.c1
         Merge Cond: (t2.c1 = t1.c1)
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t2
               Output: t2.c1
         ->  Materialize
               Output: t1.c1
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 1"
(15 rows)

SELECT t1.c1, t2.c1 FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2.c1) OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2.c1 FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2.c1) OFFSET 100 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Merge Right Join
         Output: t1.c1, t2.c1
         Merge Cond: (t2.c1 = t1.c1)
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t2
               Output: t2.c1
         ->  Materialize
               Output: t1.c1
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 1"
(15 rows)

SELECT t1.c1, t2.c1 FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2.c1) OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between local table and foreign join. ORDER BY clause is added to the
-- foreign join so that the local table can be joined using merge join strategy.
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1 FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1.c1) OFFSET 100 LIMIT 10;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Merge Left Join
         Output: t1.c1
         Merge Cond: (t1.c1 = t3.c1)
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
               Output: t1.c1
         ->  Materialize
               Output: t3.c1
               ->  Merge Join
                     Output: t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 1"
                     ->  Materialize
                           Output: t3.c1
                           ->  Sort
                                 Output: t3.c1
                                 Sort Key: t3.c1
                                 ->  Foreign Scan on public.ft2 t3
                                       Output: t3.c1
                                       Remote SQL: SELECT c1 FROM "S 1"."T 1"
(26 rows)

SELECT t1.c1 FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1.c1) OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1.c1) OFFSET 100 LIMIT 10;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t3.c1
   ->  Merge Left Join
         Output: t1.c1, t2.c1, t3.c1
         Merge Cond: (t1.c1 = t3.c1)
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
               Output: t1.c1
         ->  Materialize
               Output: t3.c1, t2.c1
               ->  Merge Left Join
                     Output: t3.c1, t2.c1
                     Merge Cond: (t3.c1 = t2.c1)
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 1"
                     ->  Materialize
                           Output: t2.c1
                           ->  Sort
                                 Output: t2.c1
                                 Sort Key: t2.c1
                                 ->  Foreign Scan on public.ft1 t2
                                       Output: t2.c1
                                       Remote SQL: SELECT c1 FROM "S 1"."T 1"
(26 rows)

SELECT t1.c1, t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1.c1) OFFSET 100 LIMIT 10;
 c1  | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1.c1) OFFSET 100 LIMIT 10;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t3.c1
   ->  Merge Full Join
         Output: t1.c1, t2.c1, t3.c1
         Merge Cond: (t1.c1 = t3.c1)
         ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
               Output: t1.c1
         ->  Materialize
               Output: t2.c1, t3.c1
               ->  Sort
                     Output: t2.c1, t3.c1
                     Sort Key: t3.c1
                     ->  Merge Full Join
                           Output: t2.c1, t3.c1
                           Merge Cond: (t2.c1 = t3.c1)
                           ->  Sort
                                 Output: t2.c1
                                 Sort Key: t2.c1
                                 ->  Foreign Scan on public.ft1 t2
                                       Output: t2.c1
                                       Remote SQL: SELECT c1 FROM "S 1"."T 1"
                           ->  Materialize
                                 Output: t3.c1
                                 ->  Sort
                                       Output: t3.c1
                                       Sort Key: t3.c1
                                       ->  Foreign Scan on public.ft2 t3
                                             Output: t3.c1
                                             Remote SQL: SELECT c1 FROM "S 1"."T 1"
(29 rows)

SELECT t1.c1, t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1.c1) OFFSET 100 LIMIT 10;
 c1  | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = 100)) AND ((c2 = 0))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 IS NULL))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 IS NOT NULL))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((round(abs(c1), 0) = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = (- c1)))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE 1 = c1!;           -- OpExpr(r)
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((1 = (c1 !)))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE (((c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL)))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                            QUERY PLAN                            
------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Filter: (t1.c1 = ANY (ARRAY[t1.c2, 1, (t1.c1 + 0)]))
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- ArrayRef
                            QUERY PLAN                            
------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Filter: (t1.c1 = (ARRAY[t1.c1, t1.c2, 3])[1])
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c6 = E'foo''s\\bar'))
(3 rows)

-- parameterized remote path for foreign table
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T 1" a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Hash Join
   Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7
   Hash Cond: (b.c1 = a.c2)
   ->  Foreign Scan on public.ft2 b
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
   ->  Hash
         Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7
         ->  Index Scan using t1_pkey on "S 1"."T 1" a
               Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7
               Index Cond: (a.c1 = 47)
(11 rows)

SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----+----+-------+------------------------------+--------------------------+----+------------+----+----+-------+------------------------------+--------------------------+----+------------
 47 |  7 | 00047 | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          |  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7         
(1 row)

-- check both safe and unsafe join conditions
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE a.c2 = 6 AND b.c1 = a.c1 AND b.c7 = upper(a.c7);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Merge Join
   Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7
   Merge Cond: ((b.c1 = a.c1) AND (((b.c7)::text) = (upper((a.c7)::text))))
   ->  Sort
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, ((b.c7)::text)
         Sort Key: b.c1, ((b.c7)::text)
         ->  Foreign Scan on public.ft2 b
               Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c7
               Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
   ->  Sort
         Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, (upper((a.c7)::text))
         Sort Key: a.c1, (upper((a.c7)::text))
         ->  Foreign Scan on public.ft2 a
               Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, upper((a.c7)::text)
               Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c2 = 6))
(15 rows)

SELECT * FROM ft2 a, ft2 b
WHERE a.c2 = 6 AND b.c1 = a.c1 AND b.c7 = upper(a.c7);
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----+-------+------------------------------+--------------------------+----+------------
   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          |   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          |  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          |  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          |  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          |  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          |  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          |  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          |  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          |  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          |  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6         
 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6         
 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6         
 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6         
 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6         
 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6         
 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6         
 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6         
(100 rows)

-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
SELECT * FROM ft1 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft2 WHERE c1 < 5));
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----+----+-------+------------------------------+--------------------------+----+------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2         
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3         
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4         
(4 rows)

SELECT * FROM ft2 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft1 WHERE c1 < 5));
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----+----+-------+------------------------------+--------------------------+----+------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2         
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3         
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4         
(4 rows)

-- we should not push order by clause with volatile expressions or unsafe
-- collations
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, random();
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, (random())
   Sort Key: ft2.c1, (random())
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, random()
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
(6 rows)

EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, ((c3)::text)
   Sort Key: ft2.c1, ft2.c3 COLLATE "C"
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c3
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
(6 rows)

-- ===================================================================
-- JOIN queries
-- ===================================================================
-- Analyze ft4 and ft5 so that we have better statistics. These tables do not
-- have use_remote_estimate set.
ANALYZE ft4;
WARNING:  skipping "ft4" --- cannot analyze this foreign table
ANALYZE ft5;
WARNING:  skipping "ft5" --- cannot analyze this foreign table
-- join two tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Nested Loop
         Output: t1.c1, t2.c1, t1.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c3
               Remote SQL: SELECT c1, c3 FROM "S 1"."T 1" ORDER BY c3 ASC, c1 ASC
         ->  Materialize
               Output: t2.c1
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
(13 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   ->  Nested Loop
         Output: t1.c1, t2.c2, t3.c3, t1.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop
               Output: t1.c1, t1.c3, t3.c3, t3.c1
               Join Filter: (t1.c1 = t3.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 1" ORDER BY c3 ASC, c1 ASC
               ->  Materialize
                     Output: t3.c3, t3.c1
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.c3, t3.c1
                           Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
         ->  Materialize
               Output: t2.c2, t2.c1
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t2.c1
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 22 |   
 24 | 24
 26 |   
 28 |   
 30 | 30
 32 |   
 34 |   
 36 | 36
 38 |   
 40 |   
(10 rows)

-- left outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Merge Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Merge Cond: (t1.c1 = ft5.c1)
   ->  Sort
         Output: t1.c1, t1.c2
         Sort Key: t1.c1
         ->  Foreign Scan on public.ft4 t1
               Output: t1.c1, t1.c2
               Remote SQL: SELECT c1, c2 FROM "S 1"."T 3" WHERE ((c1 < 10))
   ->  Materialize
         Output: ft5.c1, ft5.c2
         ->  Sort
               Output: ft5.c1, ft5.c2
               Sort Key: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1, ft5.c2
                     Remote SQL: SELECT c1, c2 FROM "S 1"."T 4" WHERE ((c1 < 10))
(17 rows)

SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Merge Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Merge Cond: (t1.c1 = ft5.c1)
   Filter: ((ft5.c1 < 10) OR (ft5.c1 IS NULL))
   ->  Sort
         Output: t1.c1, t1.c2
         Sort Key: t1.c1
         ->  Foreign Scan on public.ft4 t1
               Output: t1.c1, t1.c2
               Remote SQL: SELECT c1, c2 FROM "S 1"."T 3" WHERE ((c1 < 10))
   ->  Materialize
         Output: ft5.c1, ft5.c2
         ->  Sort
               Output: ft5.c1, ft5.c2
               Sort Key: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1, ft5.c2
                     Remote SQL: SELECT c1, c2 FROM "S 1"."T 4" WHERE ((c1 < 10))
(18 rows)

SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t2.c1, t1.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t2.c1 = t1.c1)
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t1.c1
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft5 t1
                                 Output: t1.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c1, t3.c2, t3.c3
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Full Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t2.c1
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
 c1  | c1 
-----+----
  92 |   
  94 |   
  96 | 96
  98 |   
 100 |   
     |  3
     |  9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft5.c1
   Sort Key: ft4.c1, ft5.c1
   ->  Merge Full Join
         Output: ft4.c1, ft5.c1
         Merge Cond: (ft4.c1 = ft5.c1)
         ->  Sort
               Output: ft4.c1
               Sort Key: ft4.c1
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Sort
               Output: ft5.c1
               Sort Key: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(18 rows)

SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
 50 |   
 52 |   
 54 | 54
 56 |   
 58 |   
 60 | 60
    | 51
    | 57
(8 rows)

-- full outer join + inner join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t3.c1
   ->  Sort
         Output: t1.c1, t2.c1, t3.c1
         Sort Key: t1.c1, t2.c1, t3.c1
         ->  Merge Full Join
               Output: t1.c1, t2.c1, t3.c1
               Merge Cond: (t3.c1 = t2.c1)
               ->  Sort
                     Output: t3.c1
                     Sort Key: t3.c1
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t1.c1, t2.c1
                     ->  Sort
                           Output: t1.c1, t2.c1
                           Sort Key: t2.c1
                           ->  Merge Join
                                 Output: t1.c1, t2.c1
                                 Merge Cond: (t1.c1 = ((t2.c1 + 1)))
                                 ->  Sort
                                       Output: t1.c1
                                       Sort Key: t1.c1
                                       ->  Foreign Scan on public.ft4 t1
                                             Output: t1.c1
                                             Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
                                 ->  Materialize
                                       Output: t2.c1, ((t2.c1 + 1))
                                       ->  Sort
                                             Output: t2.c1, ((t2.c1 + 1))
                                             Sort Key: ((t2.c1 + 1))
                                             ->  Foreign Scan on public.ft5 t2
                                                   Output: t2.c1, (t2.c1 + 1)
                                                   Remote SQL: SELECT c1 FROM "S 1"."T 4"
(36 rows)

SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
 c1 | c1 | c1 
----+----+----
 52 | 51 |   
 58 | 57 |   
    |    |  2
    |    |  4
    |    |  6
    |    |  8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1  | c2 | c3 
-----+----+----
 370 |  0 | 
 472 |  2 | 
 483 |  3 | 
 488 |  8 | 
 505 |  5 | 
 519 |  9 | 
 522 |  2 | 
 564 |  4 | 
 585 |  5 | 
 683 |  3 | 
(10 rows)

-- full outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c1, t3.c2, t3.c3
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- right outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t1.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
               ->  Materialize
                     Output: t1.c1
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1  | c2 | c3 
-----+----+----
 370 |  0 | 
 472 |  2 | 
 483 |  3 | 
 488 |  8 | 
 505 |  5 | 
 519 |  9 | 
 522 |  2 | 
 564 |  4 | 
 585 |  5 | 
 683 |  3 | 
(10 rows)

-- full outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1  | c2 | c3 
-----+----+----
 190 |  0 | 
 199 |  9 | 
 207 |  7 | 
 220 |  0 | 
 235 |  5 | 
 257 |  7 | 
 284 |  4 | 
 290 |  0 | 
 292 |  2 | 
 299 |  9 | 
(10 rows)

-- left outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1  | c2 | c3 
-----+----+----
 370 |  0 | 
 472 |  2 | 
 483 |  3 | 
 488 |  8 | 
 505 |  5 | 
 519 |  9 | 
 522 |  2 | 
 564 |  4 | 
 585 |  5 | 
 683 |  3 | 
(10 rows)

-- right outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t3.c3
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
               ->  Materialize
                     Output: t3.c3, t3.c1
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.c3, t3.c1
                           Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Right Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Remote SQL: SELECT c1, c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 70 |  0 | AAA070
 14 |  4 | AAA014
 20 |  0 | AAA020
 54 |  4 | AAA054
 58 |  8 | AAA058
 48 |  8 | AAA048
 78 |  8 | AAA078
 68 |  8 | AAA068
 38 |  8 | AAA038
 66 |  6 | AAA066
(10 rows)

-- full outer join + WHERE clause, only matched rows
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Full Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               Filter: ((t1.c1 = t2.c1) OR (t1.c1 IS NULL))
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t2.c1
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 4"
(23 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    |  3
    |  9
    | 15
    | 21
(10 rows)

-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Nested Loop
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3, t1.*
                     Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" ORDER BY c3 ASC, c1 ASC FOR UPDATE
               ->  Materialize
                     Output: t2.c1, t2.*
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
(15 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Nested Loop
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3, t1.*
                     Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" ORDER BY c3 ASC, c1 ASC FOR UPDATE
               ->  Materialize
                     Output: t2.c1, t2.*
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" FOR UPDATE
(15 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Nested Loop
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3, t1.*
                     Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" ORDER BY c3 ASC, c1 ASC FOR SHARE
               ->  Materialize
                     Output: t2.c1, t2.*
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
(15 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Nested Loop
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3, t1.*
                     Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" ORDER BY c3 ASC, c1 ASC FOR SHARE
               ->  Materialize
                     Output: t2.c1, t2.*
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" FOR SHARE
(15 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t.c1_1, t.c2_1, t.c1_3
   CTE t
     ->  Merge Join
           Output: t1.c1, t1.c3, t2.c1
           Merge Cond: (t1.c1 = t2.c1)
           ->  Sort
                 Output: t1.c1, t1.c3
                 Sort Key: t1.c1
                 ->  Foreign Scan on public.ft1 t1
                       Output: t1.c1, t1.c3
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 1"
           ->  Materialize
                 Output: t2.c1
                 ->  Sort
                       Output: t2.c1
                       Sort Key: t2.c1
                       ->  Foreign Scan on public.ft2 t2
                             Output: t2.c1
                             Remote SQL: SELECT c1 FROM "S 1"."T 1"
   ->  Sort
         Output: t.c1_1, t.c2_1, t.c1_3
         Sort Key: t.c1_3, t.c1_1
         ->  CTE Scan on t
               Output: t.c1_1, t.c2_1, t.c1_3
(25 rows)

WITH t (c1_1, c1_3, c2_1) AS (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
 c1_1 | c2_1 
------+------
  101 |  101
  102 |  102
  103 |  103
  104 |  104
  105 |  105
  106 |  106
  107 |  107
  108 |  108
  109 |  109
  110 |  110
(10 rows)

-- ctid with whole-row reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
ERROR:  ctid columns are not supported
-- SEMI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Merge Semi Join
         Output: t1.c1
         Merge Cond: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1
               Remote SQL: SELECT c1 FROM "S 1"."T 1" ORDER BY c1 ASC
         ->  Materialize
               Output: t2.c1
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1" ORDER BY c1 ASC
(13 rows)

SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Anti Join
               Output: t1.c1
               Hash Cond: (t1.c1 = t2.c2)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c2
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2
                           Remote SQL: SELECT c2 FROM "S 1"."T 1"
(16 rows)

SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop
               Output: t1.c1, t2.c1
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     Remote SQL: SELECT c1 FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 1"
(15 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- different server, not pushed down. No result expected.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Merge Join
         Output: t1.c1, t2.c1
         Merge Cond: (t1.c1 = t2.c1)
         ->  Foreign Scan on public.ft5 t1
               Output: t1.c1, t1.c2, t1.c3
               Remote SQL: SELECT c1 FROM "S 1"."T 4" ORDER BY c1 ASC
         ->  Materialize
               Output: t2.c1, t2.c2, t2.c3
               ->  Foreign Scan on public.ft6 t2
                     Output: t2.c1, t2.c2, t2.c3
                     Remote SQL: SELECT c1 FROM "S 1"."T 4" ORDER BY c1 ASC
(13 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

-- Aggregate after UNION, for testing setrefs
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, (avg((t1.c1 + t2.c1)))
   ->  GroupAggregate
         Output: t1.c1, avg((t1.c1 + t2.c1))
         Group Key: t1.c1
         ->  Unique
               Output: t1.c1, t2.c1
               ->  Sort
                     Output: t1.c1, t2.c1
                     Sort Key: t1.c1, t2.c1
                     ->  Append
                           ->  Merge Join
                                 Output: t1.c1, t2.c1
                                 Merge Cond: (t1.c1 = t2.c1)
                                 ->  Sort
                                       Output: t1.c1
                                       Sort Key: t1.c1
                                       ->  Foreign Scan on public.ft1 t1
                                             Output: t1.c1
                                             Remote SQL: SELECT c1 FROM "S 1"."T 1"
                                 ->  Materialize
                                       Output: t2.c1
                                       ->  Sort
                                             Output: t2.c1
                                             Sort Key: t2.c1
                                             ->  Foreign Scan on public.ft2 t2
                                                   Output: t2.c1
                                                   Remote SQL: SELECT c1 FROM "S 1"."T 1"
                           ->  Merge Join
                                 Output: t1_1.c1, t2_1.c1
                                 Merge Cond: (t1_1.c1 = t2_1.c1)
                                 ->  Sort
                                       Output: t1_1.c1
                                       Sort Key: t1_1.c1
                                       ->  Foreign Scan on public.ft1 t1_1
                                             Output: t1_1.c1
                                             Remote SQL: SELECT c1 FROM "S 1"."T 1"
                                 ->  Materialize
                                       Output: t2_1.c1
                                       ->  Sort
                                             Output: t2_1.c1
                                             Sort Key: t2_1.c1
                                             ->  Foreign Scan on public.ft2 t2_1
                                                   Output: t2_1.c1
                                                   Remote SQL: SELECT c1 FROM "S 1"."T 1"
(45 rows)

SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg          
------+----------------------
  101 | 202.0000000000000000
  102 | 204.0000000000000000
  103 | 206.0000000000000000
  104 | 208.0000000000000000
  105 | 210.0000000000000000
  106 | 212.0000000000000000
  107 | 214.0000000000000000
  108 | 216.0000000000000000
  109 | 218.0000000000000000
  110 | 220.0000000000000000
(10 rows)

-- join with lateral reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1.c1 OFFSET 10 LIMIT 10;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Nested Loop
         Output: t1.c1
         ->  Index Scan using t1_pkey on "S 1"."T 1" t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7
         ->  Unique
               Output: t2.c1, t3.c1
               ->  Merge Join
                     Output: t2.c1, t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Foreign Scan on public.ft1 t2
                           Output: t2.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 1" WHERE ((c2 = $1::integer)) ORDER BY c1 ASC
                     ->  Materialize
                           Output: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 1" ORDER BY c1 ASC
(19 rows)

SELECT t1.c1 FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1.c1 OFFSET 10 LIMIT 10;
ERROR:  ERROR: there is no parameter $1;
Error while executing the query
-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), ft2.c1
   Join Filter: (13 = ft2.c1)
   ->  Foreign Scan on public.ft2
         Output: ft2.c1
         Remote SQL: SELECT c1 FROM "S 1"."T 1" WHERE ((c1 >= 10)) AND ((c1 <= 15))
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.ft1
               Output: 13
               Remote SQL: SELECT NULL FROM "S 1"."T 1" WHERE ((c1 = 13))
(11 rows)

SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
 a  | c1 
----+----
    | 10
    | 11
    | 12
 13 | 13
    | 14
    | 15
(6 rows)

-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Merge Left Join
   Output: ft4.c1, (13), ft1.c1, ft2.c1
   Merge Cond: (ft4.c1 = ft1.c1)
   ->  Sort
         Output: ft4.c1
         Sort Key: ft4.c1
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 10)) AND ((c1 <= 15))
   ->  Materialize
         Output: ft1.c1, ft2.c1, (13)
         ->  Sort
               Output: ft1.c1, ft2.c1, (13)
               Sort Key: ft1.c1
               ->  Nested Loop
                     Output: ft1.c1, ft2.c1, 13
                     ->  Foreign Scan on public.ft1
                           Output: ft1.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 1" WHERE ((c1 = 12))
                     ->  Materialize
                           Output: ft2.c1
                           ->  Foreign Scan on public.ft2
                                 Output: ft2.c1
                                 Remote SQL: SELECT c1 FROM "S 1"."T 1" WHERE ((c1 = 12))
(24 rows)

SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
 c1 | a  | b  | c  
----+----+----+----
 10 |    |    |   
 12 | 13 | 12 | 12
 14 |    |    |   
(3 rows)

-- join with nullable side with some columns with null values
UPDATE ft5 SET c3 = null where c1 % 9 = 0;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Merge Join
   Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
   Merge Cond: (ft4.c1 = ft5.c1)
   ->  Foreign Scan on public.ft4
         Output: ft4.c1, ft4.c2, ft4.c3
         Remote SQL: SELECT c1, c2 FROM "S 1"."T 3" WHERE ((c1 >= 10)) AND ((c1 <= 30)) ORDER BY c1 ASC
   ->  Materialize
         Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
         ->  Foreign Scan on public.ft5
               Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
               Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4" ORDER BY c1 ASC
(11 rows)

SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
      ft5       | c1 | c2 |   c3   | c1 | c2 
----------------+----+----+--------+----+----
 (12,13,AAA012) | 12 | 13 | AAA012 | 12 | 13
 (18,19,)       | 18 | 19 |        | 18 | 19
 (24,25,AAA024) | 24 | 25 | AAA024 | 24 | 25
 (30,31,AAA030) | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- check join pushdown in situations where multiple userids are involved
CREATE ROLE regress_view_owner;
CREATE USER MAPPING FOR regress_view_owner SERVER loopback;
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
CREATE VIEW v4 AS SELECT * FROM ft4;
CREATE VIEW v5 AS SELECT * FROM ft5;
ALTER VIEW v5 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Merge Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Merge Cond: (ft4.c1 = ft5.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Materialize
                     Output: ft5.c2, ft5.c1
                     ->  Sort
                           Output: ft5.c2, ft5.c1
                           Sort Key: ft5.c1
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.c2, ft5.c1
                                 Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Merge Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Merge Cond: (ft4.c1 = ft5.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Materialize
                     Output: ft5.c2, ft5.c1
                     ->  Sort
                           Output: ft5.c2, ft5.c1
                           Sort Key: ft5.c1
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.c2, ft5.c1
                                 Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Merge Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Merge Cond: (ft4.c1 = t2.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Sort
                           Output: t2.c2, t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c2, t2.c1
                                 Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO CURRENT_USER;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Merge Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Merge Cond: (ft4.c1 = t2.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Sort
                           Output: t2.c2, t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c2, t2.c1
                                 Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
-- cleanup
DROP OWNED BY regress_view_owner;
DROP ROLE regress_view_owner;
-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
PREPARE st1(int, int) AS SELECT t1.c3, t2.c3 FROM ft1 t1, ft2 t2 WHERE t1.c1 = $1 AND t2.c1 = $2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Nested Loop
   Output: t1.c3, t2.c3
   ->  Foreign Scan on public.ft1 t1
         Output: t1.c3
         Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c1 = 1))
   ->  Materialize
         Output: t2.c3
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c3
               Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c1 = 2))
(10 rows)

EXECUTE st1(1, 1);
  c3   |  c3   
-------+-------
 00001 | 00001
(1 row)

EXECUTE st1(101, 101);
  c3   |  c3   
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
PREPARE st2(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c4) = '1970-01-17'::date) ORDER BY c1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7
   Sort Key: t1.c1
   ->  Hash Join
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7
               Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 < 20))
         ->  Hash
               Output: t2.c3
               ->  HashAggregate
                     Output: t2.c3
                     Group Key: t2.c3
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c3
                           Filter: (date(t2.c4) = '01-17-1970'::date)
                           Remote SQL: SELECT c3, c4 FROM "S 1"."T 1" WHERE ((c1 > 10))
(18 rows)

EXECUTE st2(10, 20);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----+----+-------+------------------------------+--------------------------+----+------------
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
(1 row)

EXECUTE st2(101, 121);
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     
-----+----+-------+------------------------------+--------------------------+----+------------
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
(1 row)

-- subquery using immutable function (can be sent to remote)
PREPARE st3(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c5) = '1970-01-17'::date) ORDER BY c1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7
   Sort Key: t1.c1
   ->  Hash Join
         Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2, t1.c3, t1.c4, t1.c5, t1.c6, t1.c7
               Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 < 20))
         ->  Hash
               Output: t2.c3
               ->  HashAggregate
                     Output: t2.c3
                     Group Key: t2.c3
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c3
                           Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c1 > 10)) AND ((date(c5) = '1970-01-17'))
(17 rows)

EXECUTE st3(10, 20);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----+----+-------+------------------------------+--------------------------+----+------------
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6         
(1 row)

EXECUTE st3(20, 30);
 c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+----+----+----+----+----+----
(0 rows)

-- custom plan should be chosen initially
PREPARE st4(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 = $1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = 1))
(3 rows)

-- once we try it enough times, should switch to generic plan
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = $1::integer))
(3 rows)

-- value of $1 should not be sent to remote
--PREPARE st5(user_enum,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
--EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
--EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
--EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
--EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
--EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
--EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
--EXECUTE st5('foo', 1);
-- altering FDW options requires replanning
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE t1.c1 = t1.c2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" WHERE ((c1 = c2))
(3 rows)

PREPARE st7 AS INSERT INTO ft1 (c1,c2,c3) VALUES (1001,101,'foo');
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   ->  Result
         Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10)
(3 rows)

ALTER TABLE "S 1"."T 1" RENAME TO "T 0";
ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T 0');
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7
   Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 0" WHERE ((c1 = c2))
(3 rows)

EXECUTE st6;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----+----+-------+------------------------------+--------------------------+----+------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2         
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3         
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4         
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5         
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6         
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7         
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8         
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9         
(9 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft1
   ->  Result
         Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10)
(3 rows)

ALTER TABLE "S 1"."T 0" RENAME TO "T 1";
ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T 1');
PREPARE st8 AS SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                            QUERY PLAN                            
------------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c1 = c2))
(5 rows)

EXECUTE st8;
 count 
-------
     9
(1 row)

-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
--DEALLOCATE st5;
DEALLOCATE st6;
DEALLOCATE st7;
DEALLOCATE st8;
-- System columns, except ctid, should not be sent to remote
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7
         Filter: (t1.tableoid = '1259'::oid)
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
(6 rows)

SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----+----+-------+------------------------------+--------------------------+----+------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ((tableoid)::regclass), c1, c2, c3, c4, c5, c6, c7
   ->  Foreign Scan on public.ft1 t1
         Output: (tableoid)::regclass, c1, c2, c3, c4, c5, c6, c7
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1"
(5 rows)

SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
 tableoid | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----------+----+----+-------+------------------------------+--------------------------+----+------------
 ft1      |  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
(1 row)

-- ===================================================================
-- used in pl/pgsql function
-- ===================================================================
CREATE OR REPLACE FUNCTION f_test(p_c1 int) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
    SELECT c1 INTO v_c1 FROM ft1 WHERE c1 = p_c1 LIMIT 1;
    PERFORM c1 FROM ft1 WHERE c1 = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
SELECT f_test(100);
 f_test 
--------
    100
(1 row)

DROP FUNCTION f_test(int);
-- ===================================================================
-- conversion error
-- ===================================================================
--ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE int;
SELECT * FROM ft1 WHERE c1 = 1;  -- ERROR
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     
----+----+-------+------------------------------+--------------------------+----+------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1         
(1 row)

SELECT  ft1.c1,  ft2.c2 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
 c1 | c2 
----+----
  1 |  1
(1 row)

SELECT  ft1.c1,  ft2.c2, ft1 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
 c1 | c2 |                                         ft1                                          
----+----+--------------------------------------------------------------------------------------
  1 |  1 | (1,1,00001,"Fri Jan 02 00:00:00 1970 PST","Fri Jan 02 00:00:00 1970",1,"1         ")
(1 row)

-- ===================================================================
-- test handling of collations
-- ===================================================================
create table loct3 (f1 text collate "C" unique, f2 text, f3 varchar(10) unique);
create foreign table ft3 (f1 text collate "C", f2 text, f3 varchar(10))
  server loopback options (table 'loct3', use_remote_estimate 'true');
-- can be sent to remote
explain (verbose, costs off) select * from ft3 where f1 = 'foo';
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(3 rows)

explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
(3 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f2 = 'foo'))
(3 rows)

explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f3 = 'foo'))
(3 rows)

explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 and l.f1 = 'foo';
                         QUERY PLAN                          
-------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   Hash Cond: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         Remote SQL: SELECT f1, f2, f3 FROM public.loct3
   ->  Hash
         Output: l.f1, l.f2, l.f3
         ->  Index Scan using loct3_f1_key on public.loct3 l
               Output: l.f1, l.f2, l.f3
               Index Cond: (l.f1 = 'foo'::text)
(11 rows)

-- can't be sent to remote
explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f1)::text = 'foo'::text)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f1 = 'foo'::text COLLATE "C")
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f2)::text = 'foo'::text)
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                    QUERY PLAN                     
---------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f2 = 'foo'::text COLLATE "C")
   Remote SQL: SELECT f1, f2, f3 FROM public.loct3
(4 rows)

explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
                         QUERY PLAN                          
-------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   Hash Cond: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         Remote SQL: SELECT f1, f2, f3 FROM public.loct3
   ->  Hash
         Output: l.f1, l.f2, l.f3
         ->  Index Scan using loct3_f1_key on public.loct3 l
               Output: l.f1, l.f2, l.f3
               Index Cond: (l.f1 = 'foo'::text)
(11 rows)

-- ===================================================================
-- test writable foreign table stuff
-- ===================================================================
EXPLAIN (verbose, costs off)
INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
                                                                                                           QUERY PLAN                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Insert on public.ft2
   ->  Subquery Scan on "*SELECT*"
         Output: "*SELECT*"."?column?", "*SELECT*"."?column?_1", NULL::integer, "*SELECT*"."?column?_2", NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10)
         ->  Limit
               Output: ((ft2_1.c1 + 1000)), ((ft2_1.c2 + 100)), ((ft2_1.c3 || ft2_1.c3))
               ->  Foreign Scan on public.ft2 ft2_1
                     Output: (ft2_1.c1 + 1000), (ft2_1.c2 + 100), (ft2_1.c3 || ft2_1.c3)
                     Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 1"
(8 rows)

INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
INSERT INTO ft2 (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
EXPLAIN (verbose, costs off)
UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;              -- can be pushed down
             QUERY PLAN             
------------------------------------
 Update on public.ft2
   ->  Foreign Update on public.ft2
(2 rows)

UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
EXPLAIN (verbose, costs off)
UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
  FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;                               -- can't be pushed down
ERROR:  unexpected operation: 2
UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
  FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;
ERROR:  unexpected operation: 2
EXPLAIN (verbose, costs off)
DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;                -- can't be pushed down
ERROR:  unexpected operation: 4
DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;
ERROR:  unexpected operation: 4
SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
  c1  | c2  |         c3         |              c4              
------+-----+--------------------+------------------------------
    1 |   1 | 00001              | Fri Jan 02 00:00:00 1970 PST
    2 |   2 | 00002              | Sat Jan 03 00:00:00 1970 PST
    3 | 303 | 00003_update3      | Sun Jan 04 00:00:00 1970 PST
    4 |   4 | 00004              | Mon Jan 05 00:00:00 1970 PST
    5 |   5 | 00005              | Tue Jan 06 00:00:00 1970 PST
    6 |   6 | 00006              | Wed Jan 07 00:00:00 1970 PST
    7 |   7 | 00007              | Thu Jan 08 00:00:00 1970 PST
    8 |   8 | 00008              | Fri Jan 09 00:00:00 1970 PST
    9 |   9 | 00009              | Sat Jan 10 00:00:00 1970 PST
   10 |   0 | 00010              | Sun Jan 11 00:00:00 1970 PST
   11 |   1 | 00011              | Mon Jan 12 00:00:00 1970 PST
   12 |   2 | 00012              | Tue Jan 13 00:00:00 1970 PST
   13 | 303 | 00013_update3      | Wed Jan 14 00:00:00 1970 PST
   14 |   4 | 00014              | Thu Jan 15 00:00:00 1970 PST
   15 |   5 | 00015              | Fri Jan 16 00:00:00 1970 PST
   16 |   6 | 00016              | Sat Jan 17 00:00:00 1970 PST
   17 |   7 | 00017              | Sun Jan 18 00:00:00 1970 PST
   18 |   8 | 00018              | Mon Jan 19 00:00:00 1970 PST
   19 |   9 | 00019              | Tue Jan 20 00:00:00 1970 PST
   20 |   0 | 00020              | Wed Jan 21 00:00:00 1970 PST
   21 |   1 | 00021              | Thu Jan 22 00:00:00 1970 PST
   22 |   2 | 00022              | Fri Jan 23 00:00:00 1970 PST
   23 | 303 | 00023_update3      | Sat Jan 24 00:00:00 1970 PST
   24 |   4 | 00024              | Sun Jan 25 00:00:00 1970 PST
   25 |   5 | 00025              | Mon Jan 26 00:00:00 1970 PST
   26 |   6 | 00026              | Tue Jan 27 00:00:00 1970 PST
   27 |   7 | 00027              | Wed Jan 28 00:00:00 1970 PST
   28 |   8 | 00028              | Thu Jan 29 00:00:00 1970 PST
   29 |   9 | 00029              | Fri Jan 30 00:00:00 1970 PST
   30 |   0 | 00030              | Sat Jan 31 00:00:00 1970 PST
   31 |   1 | 00031              | Sun Feb 01 00:00:00 1970 PST
   32 |   2 | 00032              | Mon Feb 02 00:00:00 1970 PST
   33 | 303 | 00033_update3      | Tue Feb 03 00:00:00 1970 PST
   34 |   4 | 00034              | Wed Feb 04 00:00:00 1970 PST
   35 |   5 | 00035              | Thu Feb 05 00:00:00 1970 PST
   36 |   6 | 00036              | Fri Feb 06 00:00:00 1970 PST
   37 |   7 | 00037              | Sat Feb 07 00:00:00 1970 PST
   38 |   8 | 00038              | Sun Feb 08 00:00:00 1970 PST
   39 |   9 | 00039              | Mon Feb 09 00:00:00 1970 PST
   40 |   0 | 00040              | Tue Feb 10 00:00:00 1970 PST
   41 |   1 | 00041              | Wed Feb 11 00:00:00 1970 PST
   42 |   2 | 00042              | Thu Feb 12 00:00:00 1970 PST
   43 | 303 | 00043_update3      | Fri Feb 13 00:00:00 1970 PST
   44 |   4 | 00044              | Sat Feb 14 00:00:00 1970 PST
   45 |   5 | 00045              | Sun Feb 15 00:00:00 1970 PST
   46 |   6 | 00046              | Mon Feb 16 00:00:00 1970 PST
   47 |   7 | 00047              | Tue Feb 17 00:00:00 1970 PST
   48 |   8 | 00048              | Wed Feb 18 00:00:00 1970 PST
   49 |   9 | 00049              | Thu Feb 19 00:00:00 1970 PST
   50 |   0 | 00050              | Fri Feb 20 00:00:00 1970 PST
   51 |   1 | 00051              | Sat Feb 21 00:00:00 1970 PST
   52 |   2 | 00052              | Sun Feb 22 00:00:00 1970 PST
   53 | 303 | 00053_update3      | Mon Feb 23 00:00:00 1970 PST
   54 |   4 | 00054              | Tue Feb 24 00:00:00 1970 PST
   55 |   5 | 00055              | Wed Feb 25 00:00:00 1970 PST
   56 |   6 | 00056              | Thu Feb 26 00:00:00 1970 PST
   57 |   7 | 00057              | Fri Feb 27 00:00:00 1970 PST
   58 |   8 | 00058              | Sat Feb 28 00:00:00 1970 PST
   59 |   9 | 00059              | Sun Mar 01 00:00:00 1970 PST
   60 |   0 | 00060              | Mon Mar 02 00:00:00 1970 PST
   61 |   1 | 00061              | Tue Mar 03 00:00:00 1970 PST
   62 |   2 | 00062              | Wed Mar 04 00:00:00 1970 PST
   63 | 303 | 00063_update3      | Thu Mar 05 00:00:00 1970 PST
   64 |   4 | 00064              | Fri Mar 06 00:00:00 1970 PST
   65 |   5 | 00065              | Sat Mar 07 00:00:00 1970 PST
   66 |   6 | 00066              | Sun Mar 08 00:00:00 1970 PST
   67 |   7 | 00067              | Mon Mar 09 00:00:00 1970 PST
   68 |   8 | 00068              | Tue Mar 10 00:00:00 1970 PST
   69 |   9 | 00069              | Wed Mar 11 00:00:00 1970 PST
   70 |   0 | 00070              | Thu Mar 12 00:00:00 1970 PST
   71 |   1 | 00071              | Fri Mar 13 00:00:00 1970 PST
   72 |   2 | 00072              | Sat Mar 14 00:00:00 1970 PST
   73 | 303 | 00073_update3      | Sun Mar 15 00:00:00 1970 PST
   74 |   4 | 00074              | Mon Mar 16 00:00:00 1970 PST
   75 |   5 | 00075              | Tue Mar 17 00:00:00 1970 PST
   76 |   6 | 00076              | Wed Mar 18 00:00:00 1970 PST
   77 |   7 | 00077              | Thu Mar 19 00:00:00 1970 PST
   78 |   8 | 00078              | Fri Mar 20 00:00:00 1970 PST
   79 |   9 | 00079              | Sat Mar 21 00:00:00 1970 PST
   80 |   0 | 00080              | Sun Mar 22 00:00:00 1970 PST
   81 |   1 | 00081              | Mon Mar 23 00:00:00 1970 PST
   82 |   2 | 00082              | Tue Mar 24 00:00:00 1970 PST
   83 | 303 | 00083_update3      | Wed Mar 25 00:00:00 1970 PST
   84 |   4 | 00084              | Thu Mar 26 00:00:00 1970 PST
   85 |   5 | 00085              | Fri Mar 27 00:00:00 1970 PST
   86 |   6 | 00086              | Sat Mar 28 00:00:00 1970 PST
   87 |   7 | 00087              | Sun Mar 29 00:00:00 1970 PST
   88 |   8 | 00088              | Mon Mar 30 00:00:00 1970 PST
   89 |   9 | 00089              | Tue Mar 31 00:00:00 1970 PST
   90 |   0 | 00090              | Wed Apr 01 00:00:00 1970 PST
   91 |   1 | 00091              | Thu Apr 02 00:00:00 1970 PST
   92 |   2 | 00092              | Fri Apr 03 00:00:00 1970 PST
   93 | 303 | 00093_update3      | Sat Apr 04 00:00:00 1970 PST
   94 |   4 | 00094              | Sun Apr 05 00:00:00 1970 PST
   95 |   5 | 00095              | Mon Apr 06 00:00:00 1970 PST
   96 |   6 | 00096              | Tue Apr 07 00:00:00 1970 PST
   97 |   7 | 00097              | Wed Apr 08 00:00:00 1970 PST
   98 |   8 | 00098              | Thu Apr 09 00:00:00 1970 PST
   99 |   9 | 00099              | Fri Apr 10 00:00:00 1970 PST
  100 |   0 | 00100              | Thu Jan 01 00:00:00 1970 PST
  101 |   1 | 00101              | Fri Jan 02 00:00:00 1970 PST
  102 |   2 | 00102              | Sat Jan 03 00:00:00 1970 PST
  103 | 303 | 00103_update3      | Sun Jan 04 00:00:00 1970 PST
  104 |   4 | 00104              | Mon Jan 05 00:00:00 1970 PST
  105 |   5 | 00105              | Tue Jan 06 00:00:00 1970 PST
  106 |   6 | 00106              | Wed Jan 07 00:00:00 1970 PST
  107 |   7 | 00107              | Thu Jan 08 00:00:00 1970 PST
  108 |   8 | 00108              | Fri Jan 09 00:00:00 1970 PST
  109 |   9 | 00109              | Sat Jan 10 00:00:00 1970 PST
  110 |   0 | 00110              | Sun Jan 11 00:00:00 1970 PST
  111 |   1 | 00111              | Mon Jan 12 00:00:00 1970 PST
  112 |   2 | 00112              | Tue Jan 13 00:00:00 1970 PST
  113 | 303 | 00113_update3      | Wed Jan 14 00:00:00 1970 PST
  114 |   4 | 00114              | Thu Jan 15 00:00:00 1970 PST
  115 |   5 | 00115              | Fri Jan 16 00:00:00 1970 PST
  116 |   6 | 00116              | Sat Jan 17 00:00:00 1970 PST
  117 |   7 | 00117              | Sun Jan 18 00:00:00 1970 PST
  118 |   8 | 00118              | Mon Jan 19 00:00:00 1970 PST
  119 |   9 | 00119              | Tue Jan 20 00:00:00 1970 PST
  120 |   0 | 00120              | Wed Jan 21 00:00:00 1970 PST
  121 |   1 | 00121              | Thu Jan 22 00:00:00 1970 PST
  122 |   2 | 00122              | Fri Jan 23 00:00:00 1970 PST
  123 | 303 | 00123_update3      | Sat Jan 24 00:00:00 1970 PST
  124 |   4 | 00124              | Sun Jan 25 00:00:00 1970 PST
  125 |   5 | 00125              | Mon Jan 26 00:00:00 1970 PST
  126 |   6 | 00126              | Tue Jan 27 00:00:00 1970 PST
  127 |   7 | 00127              | Wed Jan 28 00:00:00 1970 PST
  128 |   8 | 00128              | Thu Jan 29 00:00:00 1970 PST
  129 |   9 | 00129              | Fri Jan 30 00:00:00 1970 PST
  130 |   0 | 00130              | Sat Jan 31 00:00:00 1970 PST
  131 |   1 | 00131              | Sun Feb 01 00:00:00 1970 PST
  132 |   2 | 00132              | Mon Feb 02 00:00:00 1970 PST
  133 | 303 | 00133_update3      | Tue Feb 03 00:00:00 1970 PST
  134 |   4 | 00134              | Wed Feb 04 00:00:00 1970 PST
  135 |   5 | 00135              | Thu Feb 05 00:00:00 1970 PST
  136 |   6 | 00136              | Fri Feb 06 00:00:00 1970 PST
  137 |   7 | 00137              | Sat Feb 07 00:00:00 1970 PST
  138 |   8 | 00138              | Sun Feb 08 00:00:00 1970 PST
  139 |   9 | 00139              | Mon Feb 09 00:00:00 1970 PST
  140 |   0 | 00140              | Tue Feb 10 00:00:00 1970 PST
  141 |   1 | 00141              | Wed Feb 11 00:00:00 1970 PST
  142 |   2 | 00142              | Thu Feb 12 00:00:00 1970 PST
  143 | 303 | 00143_update3      | Fri Feb 13 00:00:00 1970 PST
  144 |   4 | 00144              | Sat Feb 14 00:00:00 1970 PST
  145 |   5 | 00145              | Sun Feb 15 00:00:00 1970 PST
  146 |   6 | 00146              | Mon Feb 16 00:00:00 1970 PST
  147 |   7 | 00147              | Tue Feb 17 00:00:00 1970 PST
  148 |   8 | 00148              | Wed Feb 18 00:00:00 1970 PST
  149 |   9 | 00149              | Thu Feb 19 00:00:00 1970 PST
  150 |   0 | 00150              | Fri Feb 20 00:00:00 1970 PST
  151 |   1 | 00151              | Sat Feb 21 00:00:00 1970 PST
  152 |   2 | 00152              | Sun Feb 22 00:00:00 1970 PST
  153 | 303 | 00153_update3      | Mon Feb 23 00:00:00 1970 PST
  154 |   4 | 00154              | Tue Feb 24 00:00:00 1970 PST
  155 |   5 | 00155              | Wed Feb 25 00:00:00 1970 PST
  156 |   6 | 00156              | Thu Feb 26 00:00:00 1970 PST
  157 |   7 | 00157              | Fri Feb 27 00:00:00 1970 PST
  158 |   8 | 00158              | Sat Feb 28 00:00:00 1970 PST
  159 |   9 | 00159              | Sun Mar 01 00:00:00 1970 PST
  160 |   0 | 00160              | Mon Mar 02 00:00:00 1970 PST
  161 |   1 | 00161              | Tue Mar 03 00:00:00 1970 PST
  162 |   2 | 00162              | Wed Mar 04 00:00:00 1970 PST
  163 | 303 | 00163_update3      | Thu Mar 05 00:00:00 1970 PST
  164 |   4 | 00164              | Fri Mar 06 00:00:00 1970 PST
  165 |   5 | 00165              | Sat Mar 07 00:00:00 1970 PST
  166 |   6 | 00166              | Sun Mar 08 00:00:00 1970 PST
  167 |   7 | 00167              | Mon Mar 09 00:00:00 1970 PST
  168 |   8 | 00168              | Tue Mar 10 00:00:00 1970 PST
  169 |   9 | 00169              | Wed Mar 11 00:00:00 1970 PST
  170 |   0 | 00170              | Thu Mar 12 00:00:00 1970 PST
  171 |   1 | 00171              | Fri Mar 13 00:00:00 1970 PST
  172 |   2 | 00172              | Sat Mar 14 00:00:00 1970 PST
  173 | 303 | 00173_update3      | Sun Mar 15 00:00:00 1970 PST
  174 |   4 | 00174              | Mon Mar 16 00:00:00 1970 PST
  175 |   5 | 00175              | Tue Mar 17 00:00:00 1970 PST
  176 |   6 | 00176              | Wed Mar 18 00:00:00 1970 PST
  177 |   7 | 00177              | Thu Mar 19 00:00:00 1970 PST
  178 |   8 | 00178              | Fri Mar 20 00:00:00 1970 PST
  179 |   9 | 00179              | Sat Mar 21 00:00:00 1970 PST
  180 |   0 | 00180              | Sun Mar 22 00:00:00 1970 PST
  181 |   1 | 00181              | Mon Mar 23 00:00:00 1970 PST
  182 |   2 | 00182              | Tue Mar 24 00:00:00 1970 PST
  183 | 303 | 00183_update3      | Wed Mar 25 00:00:00 1970 PST
  184 |   4 | 00184              | Thu Mar 26 00:00:00 1970 PST
  185 |   5 | 00185              | Fri Mar 27 00:00:00 1970 PST
  186 |   6 | 00186              | Sat Mar 28 00:00:00 1970 PST
  187 |   7 | 00187              | Sun Mar 29 00:00:00 1970 PST
  188 |   8 | 00188              | Mon Mar 30 00:00:00 1970 PST
  189 |   9 | 00189              | Tue Mar 31 00:00:00 1970 PST
  190 |   0 | 00190              | Wed Apr 01 00:00:00 1970 PST
  191 |   1 | 00191              | Thu Apr 02 00:00:00 1970 PST
  192 |   2 | 00192              | Fri Apr 03 00:00:00 1970 PST
  193 | 303 | 00193_update3      | Sat Apr 04 00:00:00 1970 PST
  194 |   4 | 00194              | Sun Apr 05 00:00:00 1970 PST
  195 |   5 | 00195              | Mon Apr 06 00:00:00 1970 PST
  196 |   6 | 00196              | Tue Apr 07 00:00:00 1970 PST
  197 |   7 | 00197              | Wed Apr 08 00:00:00 1970 PST
  198 |   8 | 00198              | Thu Apr 09 00:00:00 1970 PST
  199 |   9 | 00199              | Fri Apr 10 00:00:00 1970 PST
  200 |   0 | 00200              | Thu Jan 01 00:00:00 1970 PST
  201 |   1 | 00201              | Fri Jan 02 00:00:00 1970 PST
  202 |   2 | 00202              | Sat Jan 03 00:00:00 1970 PST
  203 | 303 | 00203_update3      | Sun Jan 04 00:00:00 1970 PST
  204 |   4 | 00204              | Mon Jan 05 00:00:00 1970 PST
  205 |   5 | 00205              | Tue Jan 06 00:00:00 1970 PST
  206 |   6 | 00206              | Wed Jan 07 00:00:00 1970 PST
  207 |   7 | 00207              | Thu Jan 08 00:00:00 1970 PST
  208 |   8 | 00208              | Fri Jan 09 00:00:00 1970 PST
  209 |   9 | 00209              | Sat Jan 10 00:00:00 1970 PST
  210 |   0 | 00210              | Sun Jan 11 00:00:00 1970 PST
  211 |   1 | 00211              | Mon Jan 12 00:00:00 1970 PST
  212 |   2 | 00212              | Tue Jan 13 00:00:00 1970 PST
  213 | 303 | 00213_update3      | Wed Jan 14 00:00:00 1970 PST
  214 |   4 | 00214              | Thu Jan 15 00:00:00 1970 PST
  215 |   5 | 00215              | Fri Jan 16 00:00:00 1970 PST
  216 |   6 | 00216              | Sat Jan 17 00:00:00 1970 PST
  217 |   7 | 00217              | Sun Jan 18 00:00:00 1970 PST
  218 |   8 | 00218              | Mon Jan 19 00:00:00 1970 PST
  219 |   9 | 00219              | Tue Jan 20 00:00:00 1970 PST
  220 |   0 | 00220              | Wed Jan 21 00:00:00 1970 PST
  221 |   1 | 00221              | Thu Jan 22 00:00:00 1970 PST
  222 |   2 | 00222              | Fri Jan 23 00:00:00 1970 PST
  223 | 303 | 00223_update3      | Sat Jan 24 00:00:00 1970 PST
  224 |   4 | 00224              | Sun Jan 25 00:00:00 1970 PST
  225 |   5 | 00225              | Mon Jan 26 00:00:00 1970 PST
  226 |   6 | 00226              | Tue Jan 27 00:00:00 1970 PST
  227 |   7 | 00227              | Wed Jan 28 00:00:00 1970 PST
  228 |   8 | 00228              | Thu Jan 29 00:00:00 1970 PST
  229 |   9 | 00229              | Fri Jan 30 00:00:00 1970 PST
  230 |   0 | 00230              | Sat Jan 31 00:00:00 1970 PST
  231 |   1 | 00231              | Sun Feb 01 00:00:00 1970 PST
  232 |   2 | 00232              | Mon Feb 02 00:00:00 1970 PST
  233 | 303 | 00233_update3      | Tue Feb 03 00:00:00 1970 PST
  234 |   4 | 00234              | Wed Feb 04 00:00:00 1970 PST
  235 |   5 | 00235              | Thu Feb 05 00:00:00 1970 PST
  236 |   6 | 00236              | Fri Feb 06 00:00:00 1970 PST
  237 |   7 | 00237              | Sat Feb 07 00:00:00 1970 PST
  238 |   8 | 00238              | Sun Feb 08 00:00:00 1970 PST
  239 |   9 | 00239              | Mon Feb 09 00:00:00 1970 PST
  240 |   0 | 00240              | Tue Feb 10 00:00:00 1970 PST
  241 |   1 | 00241              | Wed Feb 11 00:00:00 1970 PST
  242 |   2 | 00242              | Thu Feb 12 00:00:00 1970 PST
  243 | 303 | 00243_update3      | Fri Feb 13 00:00:00 1970 PST
  244 |   4 | 00244              | Sat Feb 14 00:00:00 1970 PST
  245 |   5 | 00245              | Sun Feb 15 00:00:00 1970 PST
  246 |   6 | 00246              | Mon Feb 16 00:00:00 1970 PST
  247 |   7 | 00247              | Tue Feb 17 00:00:00 1970 PST
  248 |   8 | 00248              | Wed Feb 18 00:00:00 1970 PST
  249 |   9 | 00249              | Thu Feb 19 00:00:00 1970 PST
  250 |   0 | 00250              | Fri Feb 20 00:00:00 1970 PST
  251 |   1 | 00251              | Sat Feb 21 00:00:00 1970 PST
  252 |   2 | 00252              | Sun Feb 22 00:00:00 1970 PST
  253 | 303 | 00253_update3      | Mon Feb 23 00:00:00 1970 PST
  254 |   4 | 00254              | Tue Feb 24 00:00:00 1970 PST
  255 |   5 | 00255              | Wed Feb 25 00:00:00 1970 PST
  256 |   6 | 00256              | Thu Feb 26 00:00:00 1970 PST
  257 |   7 | 00257              | Fri Feb 27 00:00:00 1970 PST
  258 |   8 | 00258              | Sat Feb 28 00:00:00 1970 PST
  259 |   9 | 00259              | Sun Mar 01 00:00:00 1970 PST
  260 |   0 | 00260              | Mon Mar 02 00:00:00 1970 PST
  261 |   1 | 00261              | Tue Mar 03 00:00:00 1970 PST
  262 |   2 | 00262              | Wed Mar 04 00:00:00 1970 PST
  263 | 303 | 00263_update3      | Thu Mar 05 00:00:00 1970 PST
  264 |   4 | 00264              | Fri Mar 06 00:00:00 1970 PST
  265 |   5 | 00265              | Sat Mar 07 00:00:00 1970 PST
  266 |   6 | 00266              | Sun Mar 08 00:00:00 1970 PST
  267 |   7 | 00267              | Mon Mar 09 00:00:00 1970 PST
  268 |   8 | 00268              | Tue Mar 10 00:00:00 1970 PST
  269 |   9 | 00269              | Wed Mar 11 00:00:00 1970 PST
  270 |   0 | 00270              | Thu Mar 12 00:00:00 1970 PST
  271 |   1 | 00271              | Fri Mar 13 00:00:00 1970 PST
  272 |   2 | 00272              | Sat Mar 14 00:00:00 1970 PST
  273 | 303 | 00273_update3      | Sun Mar 15 00:00:00 1970 PST
  274 |   4 | 00274              | Mon Mar 16 00:00:00 1970 PST
  275 |   5 | 00275              | Tue Mar 17 00:00:00 1970 PST
  276 |   6 | 00276              | Wed Mar 18 00:00:00 1970 PST
  277 |   7 | 00277              | Thu Mar 19 00:00:00 1970 PST
  278 |   8 | 00278              | Fri Mar 20 00:00:00 1970 PST
  279 |   9 | 00279              | Sat Mar 21 00:00:00 1970 PST
  280 |   0 | 00280              | Sun Mar 22 00:00:00 1970 PST
  281 |   1 | 00281              | Mon Mar 23 00:00:00 1970 PST
  282 |   2 | 00282              | Tue Mar 24 00:00:00 1970 PST
  283 | 303 | 00283_update3      | Wed Mar 25 00:00:00 1970 PST
  284 |   4 | 00284              | Thu Mar 26 00:00:00 1970 PST
  285 |   5 | 00285              | Fri Mar 27 00:00:00 1970 PST
  286 |   6 | 00286              | Sat Mar 28 00:00:00 1970 PST
  287 |   7 | 00287              | Sun Mar 29 00:00:00 1970 PST
  288 |   8 | 00288              | Mon Mar 30 00:00:00 1970 PST
  289 |   9 | 00289              | Tue Mar 31 00:00:00 1970 PST
  290 |   0 | 00290              | Wed Apr 01 00:00:00 1970 PST
  291 |   1 | 00291              | Thu Apr 02 00:00:00 1970 PST
  292 |   2 | 00292              | Fri Apr 03 00:00:00 1970 PST
  293 | 303 | 00293_update3      | Sat Apr 04 00:00:00 1970 PST
  294 |   4 | 00294              | Sun Apr 05 00:00:00 1970 PST
  295 |   5 | 00295              | Mon Apr 06 00:00:00 1970 PST
  296 |   6 | 00296              | Tue Apr 07 00:00:00 1970 PST
  297 |   7 | 00297              | Wed Apr 08 00:00:00 1970 PST
  298 |   8 | 00298              | Thu Apr 09 00:00:00 1970 PST
  299 |   9 | 00299              | Fri Apr 10 00:00:00 1970 PST
  300 |   0 | 00300              | Thu Jan 01 00:00:00 1970 PST
  301 |   1 | 00301              | Fri Jan 02 00:00:00 1970 PST
  302 |   2 | 00302              | Sat Jan 03 00:00:00 1970 PST
  303 | 303 | 00303_update3      | Sun Jan 04 00:00:00 1970 PST
  304 |   4 | 00304              | Mon Jan 05 00:00:00 1970 PST
  305 |   5 | 00305              | Tue Jan 06 00:00:00 1970 PST
  306 |   6 | 00306              | Wed Jan 07 00:00:00 1970 PST
  307 |   7 | 00307              | Thu Jan 08 00:00:00 1970 PST
  308 |   8 | 00308              | Fri Jan 09 00:00:00 1970 PST
  309 |   9 | 00309              | Sat Jan 10 00:00:00 1970 PST
  310 |   0 | 00310              | Sun Jan 11 00:00:00 1970 PST
  311 |   1 | 00311              | Mon Jan 12 00:00:00 1970 PST
  312 |   2 | 00312              | Tue Jan 13 00:00:00 1970 PST
  313 | 303 | 00313_update3      | Wed Jan 14 00:00:00 1970 PST
  314 |   4 | 00314              | Thu Jan 15 00:00:00 1970 PST
  315 |   5 | 00315              | Fri Jan 16 00:00:00 1970 PST
  316 |   6 | 00316              | Sat Jan 17 00:00:00 1970 PST
  317 |   7 | 00317              | Sun Jan 18 00:00:00 1970 PST
  318 |   8 | 00318              | Mon Jan 19 00:00:00 1970 PST
  319 |   9 | 00319              | Tue Jan 20 00:00:00 1970 PST
  320 |   0 | 00320              | Wed Jan 21 00:00:00 1970 PST
  321 |   1 | 00321              | Thu Jan 22 00:00:00 1970 PST
  322 |   2 | 00322              | Fri Jan 23 00:00:00 1970 PST
  323 | 303 | 00323_update3      | Sat Jan 24 00:00:00 1970 PST
  324 |   4 | 00324              | Sun Jan 25 00:00:00 1970 PST
  325 |   5 | 00325              | Mon Jan 26 00:00:00 1970 PST
  326 |   6 | 00326              | Tue Jan 27 00:00:00 1970 PST
  327 |   7 | 00327              | Wed Jan 28 00:00:00 1970 PST
  328 |   8 | 00328              | Thu Jan 29 00:00:00 1970 PST
  329 |   9 | 00329              | Fri Jan 30 00:00:00 1970 PST
  330 |   0 | 00330              | Sat Jan 31 00:00:00 1970 PST
  331 |   1 | 00331              | Sun Feb 01 00:00:00 1970 PST
  332 |   2 | 00332              | Mon Feb 02 00:00:00 1970 PST
  333 | 303 | 00333_update3      | Tue Feb 03 00:00:00 1970 PST
  334 |   4 | 00334              | Wed Feb 04 00:00:00 1970 PST
  335 |   5 | 00335              | Thu Feb 05 00:00:00 1970 PST
  336 |   6 | 00336              | Fri Feb 06 00:00:00 1970 PST
  337 |   7 | 00337              | Sat Feb 07 00:00:00 1970 PST
  338 |   8 | 00338              | Sun Feb 08 00:00:00 1970 PST
  339 |   9 | 00339              | Mon Feb 09 00:00:00 1970 PST
  340 |   0 | 00340              | Tue Feb 10 00:00:00 1970 PST
  341 |   1 | 00341              | Wed Feb 11 00:00:00 1970 PST
  342 |   2 | 00342              | Thu Feb 12 00:00:00 1970 PST
  343 | 303 | 00343_update3      | Fri Feb 13 00:00:00 1970 PST
  344 |   4 | 00344              | Sat Feb 14 00:00:00 1970 PST
  345 |   5 | 00345              | Sun Feb 15 00:00:00 1970 PST
  346 |   6 | 00346              | Mon Feb 16 00:00:00 1970 PST
  347 |   7 | 00347              | Tue Feb 17 00:00:00 1970 PST
  348 |   8 | 00348              | Wed Feb 18 00:00:00 1970 PST
  349 |   9 | 00349              | Thu Feb 19 00:00:00 1970 PST
  350 |   0 | 00350              | Fri Feb 20 00:00:00 1970 PST
  351 |   1 | 00351              | Sat Feb 21 00:00:00 1970 PST
  352 |   2 | 00352              | Sun Feb 22 00:00:00 1970 PST
  353 | 303 | 00353_update3      | Mon Feb 23 00:00:00 1970 PST
  354 |   4 | 00354              | Tue Feb 24 00:00:00 1970 PST
  355 |   5 | 00355              | Wed Feb 25 00:00:00 1970 PST
  356 |   6 | 00356              | Thu Feb 26 00:00:00 1970 PST
  357 |   7 | 00357              | Fri Feb 27 00:00:00 1970 PST
  358 |   8 | 00358              | Sat Feb 28 00:00:00 1970 PST
  359 |   9 | 00359              | Sun Mar 01 00:00:00 1970 PST
  360 |   0 | 00360              | Mon Mar 02 00:00:00 1970 PST
  361 |   1 | 00361              | Tue Mar 03 00:00:00 1970 PST
  362 |   2 | 00362              | Wed Mar 04 00:00:00 1970 PST
  363 | 303 | 00363_update3      | Thu Mar 05 00:00:00 1970 PST
  364 |   4 | 00364              | Fri Mar 06 00:00:00 1970 PST
  365 |   5 | 00365              | Sat Mar 07 00:00:00 1970 PST
  366 |   6 | 00366              | Sun Mar 08 00:00:00 1970 PST
  367 |   7 | 00367              | Mon Mar 09 00:00:00 1970 PST
  368 |   8 | 00368              | Tue Mar 10 00:00:00 1970 PST
  369 |   9 | 00369              | Wed Mar 11 00:00:00 1970 PST
  370 |   0 | 00370              | Thu Mar 12 00:00:00 1970 PST
  371 |   1 | 00371              | Fri Mar 13 00:00:00 1970 PST
  372 |   2 | 00372              | Sat Mar 14 00:00:00 1970 PST
  373 | 303 | 00373_update3      | Sun Mar 15 00:00:00 1970 PST
  374 |   4 | 00374              | Mon Mar 16 00:00:00 1970 PST
  375 |   5 | 00375              | Tue Mar 17 00:00:00 1970 PST
  376 |   6 | 00376              | Wed Mar 18 00:00:00 1970 PST
  377 |   7 | 00377              | Thu Mar 19 00:00:00 1970 PST
  378 |   8 | 00378              | Fri Mar 20 00:00:00 1970 PST
  379 |   9 | 00379              | Sat Mar 21 00:00:00 1970 PST
  380 |   0 | 00380              | Sun Mar 22 00:00:00 1970 PST
  381 |   1 | 00381              | Mon Mar 23 00:00:00 1970 PST
  382 |   2 | 00382              | Tue Mar 24 00:00:00 1970 PST
  383 | 303 | 00383_update3      | Wed Mar 25 00:00:00 1970 PST
  384 |   4 | 00384              | Thu Mar 26 00:00:00 1970 PST
  385 |   5 | 00385              | Fri Mar 27 00:00:00 1970 PST
  386 |   6 | 00386              | Sat Mar 28 00:00:00 1970 PST
  387 |   7 | 00387              | Sun Mar 29 00:00:00 1970 PST
  388 |   8 | 00388              | Mon Mar 30 00:00:00 1970 PST
  389 |   9 | 00389              | Tue Mar 31 00:00:00 1970 PST
  390 |   0 | 00390              | Wed Apr 01 00:00:00 1970 PST
  391 |   1 | 00391              | Thu Apr 02 00:00:00 1970 PST
  392 |   2 | 00392              | Fri Apr 03 00:00:00 1970 PST
  393 | 303 | 00393_update3      | Sat Apr 04 00:00:00 1970 PST
  394 |   4 | 00394              | Sun Apr 05 00:00:00 1970 PST
  395 |   5 | 00395              | Mon Apr 06 00:00:00 1970 PST
  396 |   6 | 00396              | Tue Apr 07 00:00:00 1970 PST
  397 |   7 | 00397              | Wed Apr 08 00:00:00 1970 PST
  398 |   8 | 00398              | Thu Apr 09 00:00:00 1970 PST
  399 |   9 | 00399              | Fri Apr 10 00:00:00 1970 PST
  400 |   0 | 00400              | Thu Jan 01 00:00:00 1970 PST
  401 |   1 | 00401              | Fri Jan 02 00:00:00 1970 PST
  402 |   2 | 00402              | Sat Jan 03 00:00:00 1970 PST
  403 | 303 | 00403_update3      | Sun Jan 04 00:00:00 1970 PST
  404 |   4 | 00404              | Mon Jan 05 00:00:00 1970 PST
  405 |   5 | 00405              | Tue Jan 06 00:00:00 1970 PST
  406 |   6 | 00406              | Wed Jan 07 00:00:00 1970 PST
  407 |   7 | 00407              | Thu Jan 08 00:00:00 1970 PST
  408 |   8 | 00408              | Fri Jan 09 00:00:00 1970 PST
  409 |   9 | 00409              | Sat Jan 10 00:00:00 1970 PST
  410 |   0 | 00410              | Sun Jan 11 00:00:00 1970 PST
  411 |   1 | 00411              | Mon Jan 12 00:00:00 1970 PST
  412 |   2 | 00412              | Tue Jan 13 00:00:00 1970 PST
  413 | 303 | 00413_update3      | Wed Jan 14 00:00:00 1970 PST
  414 |   4 | 00414              | Thu Jan 15 00:00:00 1970 PST
  415 |   5 | 00415              | Fri Jan 16 00:00:00 1970 PST
  416 |   6 | 00416              | Sat Jan 17 00:00:00 1970 PST
  417 |   7 | 00417              | Sun Jan 18 00:00:00 1970 PST
  418 |   8 | 00418              | Mon Jan 19 00:00:00 1970 PST
  419 |   9 | 00419              | Tue Jan 20 00:00:00 1970 PST
  420 |   0 | 00420              | Wed Jan 21 00:00:00 1970 PST
  421 |   1 | 00421              | Thu Jan 22 00:00:00 1970 PST
  422 |   2 | 00422              | Fri Jan 23 00:00:00 1970 PST
  423 | 303 | 00423_update3      | Sat Jan 24 00:00:00 1970 PST
  424 |   4 | 00424              | Sun Jan 25 00:00:00 1970 PST
  425 |   5 | 00425              | Mon Jan 26 00:00:00 1970 PST
  426 |   6 | 00426              | Tue Jan 27 00:00:00 1970 PST
  427 |   7 | 00427              | Wed Jan 28 00:00:00 1970 PST
  428 |   8 | 00428              | Thu Jan 29 00:00:00 1970 PST
  429 |   9 | 00429              | Fri Jan 30 00:00:00 1970 PST
  430 |   0 | 00430              | Sat Jan 31 00:00:00 1970 PST
  431 |   1 | 00431              | Sun Feb 01 00:00:00 1970 PST
  432 |   2 | 00432              | Mon Feb 02 00:00:00 1970 PST
  433 | 303 | 00433_update3      | Tue Feb 03 00:00:00 1970 PST
  434 |   4 | 00434              | Wed Feb 04 00:00:00 1970 PST
  435 |   5 | 00435              | Thu Feb 05 00:00:00 1970 PST
  436 |   6 | 00436              | Fri Feb 06 00:00:00 1970 PST
  437 |   7 | 00437              | Sat Feb 07 00:00:00 1970 PST
  438 |   8 | 00438              | Sun Feb 08 00:00:00 1970 PST
  439 |   9 | 00439              | Mon Feb 09 00:00:00 1970 PST
  440 |   0 | 00440              | Tue Feb 10 00:00:00 1970 PST
  441 |   1 | 00441              | Wed Feb 11 00:00:00 1970 PST
  442 |   2 | 00442              | Thu Feb 12 00:00:00 1970 PST
  443 | 303 | 00443_update3      | Fri Feb 13 00:00:00 1970 PST
  444 |   4 | 00444              | Sat Feb 14 00:00:00 1970 PST
  445 |   5 | 00445              | Sun Feb 15 00:00:00 1970 PST
  446 |   6 | 00446              | Mon Feb 16 00:00:00 1970 PST
  447 |   7 | 00447              | Tue Feb 17 00:00:00 1970 PST
  448 |   8 | 00448              | Wed Feb 18 00:00:00 1970 PST
  449 |   9 | 00449              | Thu Feb 19 00:00:00 1970 PST
  450 |   0 | 00450              | Fri Feb 20 00:00:00 1970 PST
  451 |   1 | 00451              | Sat Feb 21 00:00:00 1970 PST
  452 |   2 | 00452              | Sun Feb 22 00:00:00 1970 PST
  453 | 303 | 00453_update3      | Mon Feb 23 00:00:00 1970 PST
  454 |   4 | 00454              | Tue Feb 24 00:00:00 1970 PST
  455 |   5 | 00455              | Wed Feb 25 00:00:00 1970 PST
  456 |   6 | 00456              | Thu Feb 26 00:00:00 1970 PST
  457 |   7 | 00457              | Fri Feb 27 00:00:00 1970 PST
  458 |   8 | 00458              | Sat Feb 28 00:00:00 1970 PST
  459 |   9 | 00459              | Sun Mar 01 00:00:00 1970 PST
  460 |   0 | 00460              | Mon Mar 02 00:00:00 1970 PST
  461 |   1 | 00461              | Tue Mar 03 00:00:00 1970 PST
  462 |   2 | 00462              | Wed Mar 04 00:00:00 1970 PST
  463 | 303 | 00463_update3      | Thu Mar 05 00:00:00 1970 PST
  464 |   4 | 00464              | Fri Mar 06 00:00:00 1970 PST
  465 |   5 | 00465              | Sat Mar 07 00:00:00 1970 PST
  466 |   6 | 00466              | Sun Mar 08 00:00:00 1970 PST
  467 |   7 | 00467              | Mon Mar 09 00:00:00 1970 PST
  468 |   8 | 00468              | Tue Mar 10 00:00:00 1970 PST
  469 |   9 | 00469              | Wed Mar 11 00:00:00 1970 PST
  470 |   0 | 00470              | Thu Mar 12 00:00:00 1970 PST
  471 |   1 | 00471              | Fri Mar 13 00:00:00 1970 PST
  472 |   2 | 00472              | Sat Mar 14 00:00:00 1970 PST
  473 | 303 | 00473_update3      | Sun Mar 15 00:00:00 1970 PST
  474 |   4 | 00474              | Mon Mar 16 00:00:00 1970 PST
  475 |   5 | 00475              | Tue Mar 17 00:00:00 1970 PST
  476 |   6 | 00476              | Wed Mar 18 00:00:00 1970 PST
  477 |   7 | 00477              | Thu Mar 19 00:00:00 1970 PST
  478 |   8 | 00478              | Fri Mar 20 00:00:00 1970 PST
  479 |   9 | 00479              | Sat Mar 21 00:00:00 1970 PST
  480 |   0 | 00480              | Sun Mar 22 00:00:00 1970 PST
  481 |   1 | 00481              | Mon Mar 23 00:00:00 1970 PST
  482 |   2 | 00482              | Tue Mar 24 00:00:00 1970 PST
  483 | 303 | 00483_update3      | Wed Mar 25 00:00:00 1970 PST
  484 |   4 | 00484              | Thu Mar 26 00:00:00 1970 PST
  485 |   5 | 00485              | Fri Mar 27 00:00:00 1970 PST
  486 |   6 | 00486              | Sat Mar 28 00:00:00 1970 PST
  487 |   7 | 00487              | Sun Mar 29 00:00:00 1970 PST
  488 |   8 | 00488              | Mon Mar 30 00:00:00 1970 PST
  489 |   9 | 00489              | Tue Mar 31 00:00:00 1970 PST
  490 |   0 | 00490              | Wed Apr 01 00:00:00 1970 PST
  491 |   1 | 00491              | Thu Apr 02 00:00:00 1970 PST
  492 |   2 | 00492              | Fri Apr 03 00:00:00 1970 PST
  493 | 303 | 00493_update3      | Sat Apr 04 00:00:00 1970 PST
  494 |   4 | 00494              | Sun Apr 05 00:00:00 1970 PST
  495 |   5 | 00495              | Mon Apr 06 00:00:00 1970 PST
  496 |   6 | 00496              | Tue Apr 07 00:00:00 1970 PST
  497 |   7 | 00497              | Wed Apr 08 00:00:00 1970 PST
  498 |   8 | 00498              | Thu Apr 09 00:00:00 1970 PST
  499 |   9 | 00499              | Fri Apr 10 00:00:00 1970 PST
  500 |   0 | 00500              | Thu Jan 01 00:00:00 1970 PST
  501 |   1 | 00501              | Fri Jan 02 00:00:00 1970 PST
  502 |   2 | 00502              | Sat Jan 03 00:00:00 1970 PST
  503 | 303 | 00503_update3      | Sun Jan 04 00:00:00 1970 PST
  504 |   4 | 00504              | Mon Jan 05 00:00:00 1970 PST
  505 |   5 | 00505              | Tue Jan 06 00:00:00 1970 PST
  506 |   6 | 00506              | Wed Jan 07 00:00:00 1970 PST
  507 |   7 | 00507              | Thu Jan 08 00:00:00 1970 PST
  508 |   8 | 00508              | Fri Jan 09 00:00:00 1970 PST
  509 |   9 | 00509              | Sat Jan 10 00:00:00 1970 PST
  510 |   0 | 00510              | Sun Jan 11 00:00:00 1970 PST
  511 |   1 | 00511              | Mon Jan 12 00:00:00 1970 PST
  512 |   2 | 00512              | Tue Jan 13 00:00:00 1970 PST
  513 | 303 | 00513_update3      | Wed Jan 14 00:00:00 1970 PST
  514 |   4 | 00514              | Thu Jan 15 00:00:00 1970 PST
  515 |   5 | 00515              | Fri Jan 16 00:00:00 1970 PST
  516 |   6 | 00516              | Sat Jan 17 00:00:00 1970 PST
  517 |   7 | 00517              | Sun Jan 18 00:00:00 1970 PST
  518 |   8 | 00518              | Mon Jan 19 00:00:00 1970 PST
  519 |   9 | 00519              | Tue Jan 20 00:00:00 1970 PST
  520 |   0 | 00520              | Wed Jan 21 00:00:00 1970 PST
  521 |   1 | 00521              | Thu Jan 22 00:00:00 1970 PST
  522 |   2 | 00522              | Fri Jan 23 00:00:00 1970 PST
  523 | 303 | 00523_update3      | Sat Jan 24 00:00:00 1970 PST
  524 |   4 | 00524              | Sun Jan 25 00:00:00 1970 PST
  525 |   5 | 00525              | Mon Jan 26 00:00:00 1970 PST
  526 |   6 | 00526              | Tue Jan 27 00:00:00 1970 PST
  527 |   7 | 00527              | Wed Jan 28 00:00:00 1970 PST
  528 |   8 | 00528              | Thu Jan 29 00:00:00 1970 PST
  529 |   9 | 00529              | Fri Jan 30 00:00:00 1970 PST
  530 |   0 | 00530              | Sat Jan 31 00:00:00 1970 PST
  531 |   1 | 00531              | Sun Feb 01 00:00:00 1970 PST
  532 |   2 | 00532              | Mon Feb 02 00:00:00 1970 PST
  533 | 303 | 00533_update3      | Tue Feb 03 00:00:00 1970 PST
  534 |   4 | 00534              | Wed Feb 04 00:00:00 1970 PST
  535 |   5 | 00535              | Thu Feb 05 00:00:00 1970 PST
  536 |   6 | 00536              | Fri Feb 06 00:00:00 1970 PST
  537 |   7 | 00537              | Sat Feb 07 00:00:00 1970 PST
  538 |   8 | 00538              | Sun Feb 08 00:00:00 1970 PST
  539 |   9 | 00539              | Mon Feb 09 00:00:00 1970 PST
  540 |   0 | 00540              | Tue Feb 10 00:00:00 1970 PST
  541 |   1 | 00541              | Wed Feb 11 00:00:00 1970 PST
  542 |   2 | 00542              | Thu Feb 12 00:00:00 1970 PST
  543 | 303 | 00543_update3      | Fri Feb 13 00:00:00 1970 PST
  544 |   4 | 00544              | Sat Feb 14 00:00:00 1970 PST
  545 |   5 | 00545              | Sun Feb 15 00:00:00 1970 PST
  546 |   6 | 00546              | Mon Feb 16 00:00:00 1970 PST
  547 |   7 | 00547              | Tue Feb 17 00:00:00 1970 PST
  548 |   8 | 00548              | Wed Feb 18 00:00:00 1970 PST
  549 |   9 | 00549              | Thu Feb 19 00:00:00 1970 PST
  550 |   0 | 00550              | Fri Feb 20 00:00:00 1970 PST
  551 |   1 | 00551              | Sat Feb 21 00:00:00 1970 PST
  552 |   2 | 00552              | Sun Feb 22 00:00:00 1970 PST
  553 | 303 | 00553_update3      | Mon Feb 23 00:00:00 1970 PST
  554 |   4 | 00554              | Tue Feb 24 00:00:00 1970 PST
  555 |   5 | 00555              | Wed Feb 25 00:00:00 1970 PST
  556 |   6 | 00556              | Thu Feb 26 00:00:00 1970 PST
  557 |   7 | 00557              | Fri Feb 27 00:00:00 1970 PST
  558 |   8 | 00558              | Sat Feb 28 00:00:00 1970 PST
  559 |   9 | 00559              | Sun Mar 01 00:00:00 1970 PST
  560 |   0 | 00560              | Mon Mar 02 00:00:00 1970 PST
  561 |   1 | 00561              | Tue Mar 03 00:00:00 1970 PST
  562 |   2 | 00562              | Wed Mar 04 00:00:00 1970 PST
  563 | 303 | 00563_update3      | Thu Mar 05 00:00:00 1970 PST
  564 |   4 | 00564              | Fri Mar 06 00:00:00 1970 PST
  565 |   5 | 00565              | Sat Mar 07 00:00:00 1970 PST
  566 |   6 | 00566              | Sun Mar 08 00:00:00 1970 PST
  567 |   7 | 00567              | Mon Mar 09 00:00:00 1970 PST
  568 |   8 | 00568              | Tue Mar 10 00:00:00 1970 PST
  569 |   9 | 00569              | Wed Mar 11 00:00:00 1970 PST
  570 |   0 | 00570              | Thu Mar 12 00:00:00 1970 PST
  571 |   1 | 00571              | Fri Mar 13 00:00:00 1970 PST
  572 |   2 | 00572              | Sat Mar 14 00:00:00 1970 PST
  573 | 303 | 00573_update3      | Sun Mar 15 00:00:00 1970 PST
  574 |   4 | 00574              | Mon Mar 16 00:00:00 1970 PST
  575 |   5 | 00575              | Tue Mar 17 00:00:00 1970 PST
  576 |   6 | 00576              | Wed Mar 18 00:00:00 1970 PST
  577 |   7 | 00577              | Thu Mar 19 00:00:00 1970 PST
  578 |   8 | 00578              | Fri Mar 20 00:00:00 1970 PST
  579 |   9 | 00579              | Sat Mar 21 00:00:00 1970 PST
  580 |   0 | 00580              | Sun Mar 22 00:00:00 1970 PST
  581 |   1 | 00581              | Mon Mar 23 00:00:00 1970 PST
  582 |   2 | 00582              | Tue Mar 24 00:00:00 1970 PST
  583 | 303 | 00583_update3      | Wed Mar 25 00:00:00 1970 PST
  584 |   4 | 00584              | Thu Mar 26 00:00:00 1970 PST
  585 |   5 | 00585              | Fri Mar 27 00:00:00 1970 PST
  586 |   6 | 00586              | Sat Mar 28 00:00:00 1970 PST
  587 |   7 | 00587              | Sun Mar 29 00:00:00 1970 PST
  588 |   8 | 00588              | Mon Mar 30 00:00:00 1970 PST
  589 |   9 | 00589              | Tue Mar 31 00:00:00 1970 PST
  590 |   0 | 00590              | Wed Apr 01 00:00:00 1970 PST
  591 |   1 | 00591              | Thu Apr 02 00:00:00 1970 PST
  592 |   2 | 00592              | Fri Apr 03 00:00:00 1970 PST
  593 | 303 | 00593_update3      | Sat Apr 04 00:00:00 1970 PST
  594 |   4 | 00594              | Sun Apr 05 00:00:00 1970 PST
  595 |   5 | 00595              | Mon Apr 06 00:00:00 1970 PST
  596 |   6 | 00596              | Tue Apr 07 00:00:00 1970 PST
  597 |   7 | 00597              | Wed Apr 08 00:00:00 1970 PST
  598 |   8 | 00598              | Thu Apr 09 00:00:00 1970 PST
  599 |   9 | 00599              | Fri Apr 10 00:00:00 1970 PST
  600 |   0 | 00600              | Thu Jan 01 00:00:00 1970 PST
  601 |   1 | 00601              | Fri Jan 02 00:00:00 1970 PST
  602 |   2 | 00602              | Sat Jan 03 00:00:00 1970 PST
  603 | 303 | 00603_update3      | Sun Jan 04 00:00:00 1970 PST
  604 |   4 | 00604              | Mon Jan 05 00:00:00 1970 PST
  605 |   5 | 00605              | Tue Jan 06 00:00:00 1970 PST
  606 |   6 | 00606              | Wed Jan 07 00:00:00 1970 PST
  607 |   7 | 00607              | Thu Jan 08 00:00:00 1970 PST
  608 |   8 | 00608              | Fri Jan 09 00:00:00 1970 PST
  609 |   9 | 00609              | Sat Jan 10 00:00:00 1970 PST
  610 |   0 | 00610              | Sun Jan 11 00:00:00 1970 PST
  611 |   1 | 00611              | Mon Jan 12 00:00:00 1970 PST
  612 |   2 | 00612              | Tue Jan 13 00:00:00 1970 PST
  613 | 303 | 00613_update3      | Wed Jan 14 00:00:00 1970 PST
  614 |   4 | 00614              | Thu Jan 15 00:00:00 1970 PST
  615 |   5 | 00615              | Fri Jan 16 00:00:00 1970 PST
  616 |   6 | 00616              | Sat Jan 17 00:00:00 1970 PST
  617 |   7 | 00617              | Sun Jan 18 00:00:00 1970 PST
  618 |   8 | 00618              | Mon Jan 19 00:00:00 1970 PST
  619 |   9 | 00619              | Tue Jan 20 00:00:00 1970 PST
  620 |   0 | 00620              | Wed Jan 21 00:00:00 1970 PST
  621 |   1 | 00621              | Thu Jan 22 00:00:00 1970 PST
  622 |   2 | 00622              | Fri Jan 23 00:00:00 1970 PST
  623 | 303 | 00623_update3      | Sat Jan 24 00:00:00 1970 PST
  624 |   4 | 00624              | Sun Jan 25 00:00:00 1970 PST
  625 |   5 | 00625              | Mon Jan 26 00:00:00 1970 PST
  626 |   6 | 00626              | Tue Jan 27 00:00:00 1970 PST
  627 |   7 | 00627              | Wed Jan 28 00:00:00 1970 PST
  628 |   8 | 00628              | Thu Jan 29 00:00:00 1970 PST
  629 |   9 | 00629              | Fri Jan 30 00:00:00 1970 PST
  630 |   0 | 00630              | Sat Jan 31 00:00:00 1970 PST
  631 |   1 | 00631              | Sun Feb 01 00:00:00 1970 PST
  632 |   2 | 00632              | Mon Feb 02 00:00:00 1970 PST
  633 | 303 | 00633_update3      | Tue Feb 03 00:00:00 1970 PST
  634 |   4 | 00634              | Wed Feb 04 00:00:00 1970 PST
  635 |   5 | 00635              | Thu Feb 05 00:00:00 1970 PST
  636 |   6 | 00636              | Fri Feb 06 00:00:00 1970 PST
  637 |   7 | 00637              | Sat Feb 07 00:00:00 1970 PST
  638 |   8 | 00638              | Sun Feb 08 00:00:00 1970 PST
  639 |   9 | 00639              | Mon Feb 09 00:00:00 1970 PST
  640 |   0 | 00640              | Tue Feb 10 00:00:00 1970 PST
  641 |   1 | 00641              | Wed Feb 11 00:00:00 1970 PST
  642 |   2 | 00642              | Thu Feb 12 00:00:00 1970 PST
  643 | 303 | 00643_update3      | Fri Feb 13 00:00:00 1970 PST
  644 |   4 | 00644              | Sat Feb 14 00:00:00 1970 PST
  645 |   5 | 00645              | Sun Feb 15 00:00:00 1970 PST
  646 |   6 | 00646              | Mon Feb 16 00:00:00 1970 PST
  647 |   7 | 00647              | Tue Feb 17 00:00:00 1970 PST
  648 |   8 | 00648              | Wed Feb 18 00:00:00 1970 PST
  649 |   9 | 00649              | Thu Feb 19 00:00:00 1970 PST
  650 |   0 | 00650              | Fri Feb 20 00:00:00 1970 PST
  651 |   1 | 00651              | Sat Feb 21 00:00:00 1970 PST
  652 |   2 | 00652              | Sun Feb 22 00:00:00 1970 PST
  653 | 303 | 00653_update3      | Mon Feb 23 00:00:00 1970 PST
  654 |   4 | 00654              | Tue Feb 24 00:00:00 1970 PST
  655 |   5 | 00655              | Wed Feb 25 00:00:00 1970 PST
  656 |   6 | 00656              | Thu Feb 26 00:00:00 1970 PST
  657 |   7 | 00657              | Fri Feb 27 00:00:00 1970 PST
  658 |   8 | 00658              | Sat Feb 28 00:00:00 1970 PST
  659 |   9 | 00659              | Sun Mar 01 00:00:00 1970 PST
  660 |   0 | 00660              | Mon Mar 02 00:00:00 1970 PST
  661 |   1 | 00661              | Tue Mar 03 00:00:00 1970 PST
  662 |   2 | 00662              | Wed Mar 04 00:00:00 1970 PST
  663 | 303 | 00663_update3      | Thu Mar 05 00:00:00 1970 PST
  664 |   4 | 00664              | Fri Mar 06 00:00:00 1970 PST
  665 |   5 | 00665              | Sat Mar 07 00:00:00 1970 PST
  666 |   6 | 00666              | Sun Mar 08 00:00:00 1970 PST
  667 |   7 | 00667              | Mon Mar 09 00:00:00 1970 PST
  668 |   8 | 00668              | Tue Mar 10 00:00:00 1970 PST
  669 |   9 | 00669              | Wed Mar 11 00:00:00 1970 PST
  670 |   0 | 00670              | Thu Mar 12 00:00:00 1970 PST
  671 |   1 | 00671              | Fri Mar 13 00:00:00 1970 PST
  672 |   2 | 00672              | Sat Mar 14 00:00:00 1970 PST
  673 | 303 | 00673_update3      | Sun Mar 15 00:00:00 1970 PST
  674 |   4 | 00674              | Mon Mar 16 00:00:00 1970 PST
  675 |   5 | 00675              | Tue Mar 17 00:00:00 1970 PST
  676 |   6 | 00676              | Wed Mar 18 00:00:00 1970 PST
  677 |   7 | 00677              | Thu Mar 19 00:00:00 1970 PST
  678 |   8 | 00678              | Fri Mar 20 00:00:00 1970 PST
  679 |   9 | 00679              | Sat Mar 21 00:00:00 1970 PST
  680 |   0 | 00680              | Sun Mar 22 00:00:00 1970 PST
  681 |   1 | 00681              | Mon Mar 23 00:00:00 1970 PST
  682 |   2 | 00682              | Tue Mar 24 00:00:00 1970 PST
  683 | 303 | 00683_update3      | Wed Mar 25 00:00:00 1970 PST
  684 |   4 | 00684              | Thu Mar 26 00:00:00 1970 PST
  685 |   5 | 00685              | Fri Mar 27 00:00:00 1970 PST
  686 |   6 | 00686              | Sat Mar 28 00:00:00 1970 PST
  687 |   7 | 00687              | Sun Mar 29 00:00:00 1970 PST
  688 |   8 | 00688              | Mon Mar 30 00:00:00 1970 PST
  689 |   9 | 00689              | Tue Mar 31 00:00:00 1970 PST
  690 |   0 | 00690              | Wed Apr 01 00:00:00 1970 PST
  691 |   1 | 00691              | Thu Apr 02 00:00:00 1970 PST
  692 |   2 | 00692              | Fri Apr 03 00:00:00 1970 PST
  693 | 303 | 00693_update3      | Sat Apr 04 00:00:00 1970 PST
  694 |   4 | 00694              | Sun Apr 05 00:00:00 1970 PST
  695 |   5 | 00695              | Mon Apr 06 00:00:00 1970 PST
  696 |   6 | 00696              | Tue Apr 07 00:00:00 1970 PST
  697 |   7 | 00697              | Wed Apr 08 00:00:00 1970 PST
  698 |   8 | 00698              | Thu Apr 09 00:00:00 1970 PST
  699 |   9 | 00699              | Fri Apr 10 00:00:00 1970 PST
  700 |   0 | 00700              | Thu Jan 01 00:00:00 1970 PST
  701 |   1 | 00701              | Fri Jan 02 00:00:00 1970 PST
  702 |   2 | 00702              | Sat Jan 03 00:00:00 1970 PST
  703 | 303 | 00703_update3      | Sun Jan 04 00:00:00 1970 PST
  704 |   4 | 00704              | Mon Jan 05 00:00:00 1970 PST
  705 |   5 | 00705              | Tue Jan 06 00:00:00 1970 PST
  706 |   6 | 00706              | Wed Jan 07 00:00:00 1970 PST
  707 |   7 | 00707              | Thu Jan 08 00:00:00 1970 PST
  708 |   8 | 00708              | Fri Jan 09 00:00:00 1970 PST
  709 |   9 | 00709              | Sat Jan 10 00:00:00 1970 PST
  710 |   0 | 00710              | Sun Jan 11 00:00:00 1970 PST
  711 |   1 | 00711              | Mon Jan 12 00:00:00 1970 PST
  712 |   2 | 00712              | Tue Jan 13 00:00:00 1970 PST
  713 | 303 | 00713_update3      | Wed Jan 14 00:00:00 1970 PST
  714 |   4 | 00714              | Thu Jan 15 00:00:00 1970 PST
  715 |   5 | 00715              | Fri Jan 16 00:00:00 1970 PST
  716 |   6 | 00716              | Sat Jan 17 00:00:00 1970 PST
  717 |   7 | 00717              | Sun Jan 18 00:00:00 1970 PST
  718 |   8 | 00718              | Mon Jan 19 00:00:00 1970 PST
  719 |   9 | 00719              | Tue Jan 20 00:00:00 1970 PST
  720 |   0 | 00720              | Wed Jan 21 00:00:00 1970 PST
  721 |   1 | 00721              | Thu Jan 22 00:00:00 1970 PST
  722 |   2 | 00722              | Fri Jan 23 00:00:00 1970 PST
  723 | 303 | 00723_update3      | Sat Jan 24 00:00:00 1970 PST
  724 |   4 | 00724              | Sun Jan 25 00:00:00 1970 PST
  725 |   5 | 00725              | Mon Jan 26 00:00:00 1970 PST
  726 |   6 | 00726              | Tue Jan 27 00:00:00 1970 PST
  727 |   7 | 00727              | Wed Jan 28 00:00:00 1970 PST
  728 |   8 | 00728              | Thu Jan 29 00:00:00 1970 PST
  729 |   9 | 00729              | Fri Jan 30 00:00:00 1970 PST
  730 |   0 | 00730              | Sat Jan 31 00:00:00 1970 PST
  731 |   1 | 00731              | Sun Feb 01 00:00:00 1970 PST
  732 |   2 | 00732              | Mon Feb 02 00:00:00 1970 PST
  733 | 303 | 00733_update3      | Tue Feb 03 00:00:00 1970 PST
  734 |   4 | 00734              | Wed Feb 04 00:00:00 1970 PST
  735 |   5 | 00735              | Thu Feb 05 00:00:00 1970 PST
  736 |   6 | 00736              | Fri Feb 06 00:00:00 1970 PST
  737 |   7 | 00737              | Sat Feb 07 00:00:00 1970 PST
  738 |   8 | 00738              | Sun Feb 08 00:00:00 1970 PST
  739 |   9 | 00739              | Mon Feb 09 00:00:00 1970 PST
  740 |   0 | 00740              | Tue Feb 10 00:00:00 1970 PST
  741 |   1 | 00741              | Wed Feb 11 00:00:00 1970 PST
  742 |   2 | 00742              | Thu Feb 12 00:00:00 1970 PST
  743 | 303 | 00743_update3      | Fri Feb 13 00:00:00 1970 PST
  744 |   4 | 00744              | Sat Feb 14 00:00:00 1970 PST
  745 |   5 | 00745              | Sun Feb 15 00:00:00 1970 PST
  746 |   6 | 00746              | Mon Feb 16 00:00:00 1970 PST
  747 |   7 | 00747              | Tue Feb 17 00:00:00 1970 PST
  748 |   8 | 00748              | Wed Feb 18 00:00:00 1970 PST
  749 |   9 | 00749              | Thu Feb 19 00:00:00 1970 PST
  750 |   0 | 00750              | Fri Feb 20 00:00:00 1970 PST
  751 |   1 | 00751              | Sat Feb 21 00:00:00 1970 PST
  752 |   2 | 00752              | Sun Feb 22 00:00:00 1970 PST
  753 | 303 | 00753_update3      | Mon Feb 23 00:00:00 1970 PST
  754 |   4 | 00754              | Tue Feb 24 00:00:00 1970 PST
  755 |   5 | 00755              | Wed Feb 25 00:00:00 1970 PST
  756 |   6 | 00756              | Thu Feb 26 00:00:00 1970 PST
  757 |   7 | 00757              | Fri Feb 27 00:00:00 1970 PST
  758 |   8 | 00758              | Sat Feb 28 00:00:00 1970 PST
  759 |   9 | 00759              | Sun Mar 01 00:00:00 1970 PST
  760 |   0 | 00760              | Mon Mar 02 00:00:00 1970 PST
  761 |   1 | 00761              | Tue Mar 03 00:00:00 1970 PST
  762 |   2 | 00762              | Wed Mar 04 00:00:00 1970 PST
  763 | 303 | 00763_update3      | Thu Mar 05 00:00:00 1970 PST
  764 |   4 | 00764              | Fri Mar 06 00:00:00 1970 PST
  765 |   5 | 00765              | Sat Mar 07 00:00:00 1970 PST
  766 |   6 | 00766              | Sun Mar 08 00:00:00 1970 PST
  767 |   7 | 00767              | Mon Mar 09 00:00:00 1970 PST
  768 |   8 | 00768              | Tue Mar 10 00:00:00 1970 PST
  769 |   9 | 00769              | Wed Mar 11 00:00:00 1970 PST
  770 |   0 | 00770              | Thu Mar 12 00:00:00 1970 PST
  771 |   1 | 00771              | Fri Mar 13 00:00:00 1970 PST
  772 |   2 | 00772              | Sat Mar 14 00:00:00 1970 PST
  773 | 303 | 00773_update3      | Sun Mar 15 00:00:00 1970 PST
  774 |   4 | 00774              | Mon Mar 16 00:00:00 1970 PST
  775 |   5 | 00775              | Tue Mar 17 00:00:00 1970 PST
  776 |   6 | 00776              | Wed Mar 18 00:00:00 1970 PST
  777 |   7 | 00777              | Thu Mar 19 00:00:00 1970 PST
  778 |   8 | 00778              | Fri Mar 20 00:00:00 1970 PST
  779 |   9 | 00779              | Sat Mar 21 00:00:00 1970 PST
  780 |   0 | 00780              | Sun Mar 22 00:00:00 1970 PST
  781 |   1 | 00781              | Mon Mar 23 00:00:00 1970 PST
  782 |   2 | 00782              | Tue Mar 24 00:00:00 1970 PST
  783 | 303 | 00783_update3      | Wed Mar 25 00:00:00 1970 PST
  784 |   4 | 00784              | Thu Mar 26 00:00:00 1970 PST
  785 |   5 | 00785              | Fri Mar 27 00:00:00 1970 PST
  786 |   6 | 00786              | Sat Mar 28 00:00:00 1970 PST
  787 |   7 | 00787              | Sun Mar 29 00:00:00 1970 PST
  788 |   8 | 00788              | Mon Mar 30 00:00:00 1970 PST
  789 |   9 | 00789              | Tue Mar 31 00:00:00 1970 PST
  790 |   0 | 00790              | Wed Apr 01 00:00:00 1970 PST
  791 |   1 | 00791              | Thu Apr 02 00:00:00 1970 PST
  792 |   2 | 00792              | Fri Apr 03 00:00:00 1970 PST
  793 | 303 | 00793_update3      | Sat Apr 04 00:00:00 1970 PST
  794 |   4 | 00794              | Sun Apr 05 00:00:00 1970 PST
  795 |   5 | 00795              | Mon Apr 06 00:00:00 1970 PST
  796 |   6 | 00796              | Tue Apr 07 00:00:00 1970 PST
  797 |   7 | 00797              | Wed Apr 08 00:00:00 1970 PST
  798 |   8 | 00798              | Thu Apr 09 00:00:00 1970 PST
  799 |   9 | 00799              | Fri Apr 10 00:00:00 1970 PST
  800 |   0 | 00800              | Thu Jan 01 00:00:00 1970 PST
  801 |   1 | 00801              | Fri Jan 02 00:00:00 1970 PST
  802 |   2 | 00802              | Sat Jan 03 00:00:00 1970 PST
  803 | 303 | 00803_update3      | Sun Jan 04 00:00:00 1970 PST
  804 |   4 | 00804              | Mon Jan 05 00:00:00 1970 PST
  805 |   5 | 00805              | Tue Jan 06 00:00:00 1970 PST
  806 |   6 | 00806              | Wed Jan 07 00:00:00 1970 PST
  807 |   7 | 00807              | Thu Jan 08 00:00:00 1970 PST
  808 |   8 | 00808              | Fri Jan 09 00:00:00 1970 PST
  809 |   9 | 00809              | Sat Jan 10 00:00:00 1970 PST
  810 |   0 | 00810              | Sun Jan 11 00:00:00 1970 PST
  811 |   1 | 00811              | Mon Jan 12 00:00:00 1970 PST
  812 |   2 | 00812              | Tue Jan 13 00:00:00 1970 PST
  813 | 303 | 00813_update3      | Wed Jan 14 00:00:00 1970 PST
  814 |   4 | 00814              | Thu Jan 15 00:00:00 1970 PST
  815 |   5 | 00815              | Fri Jan 16 00:00:00 1970 PST
  816 |   6 | 00816              | Sat Jan 17 00:00:00 1970 PST
  817 |   7 | 00817              | Sun Jan 18 00:00:00 1970 PST
  818 |   8 | 00818              | Mon Jan 19 00:00:00 1970 PST
  819 |   9 | 00819              | Tue Jan 20 00:00:00 1970 PST
  820 |   0 | 00820              | Wed Jan 21 00:00:00 1970 PST
  821 |   1 | 00821              | Thu Jan 22 00:00:00 1970 PST
  822 |   2 | 00822              | Fri Jan 23 00:00:00 1970 PST
  823 | 303 | 00823_update3      | Sat Jan 24 00:00:00 1970 PST
  824 |   4 | 00824              | Sun Jan 25 00:00:00 1970 PST
  825 |   5 | 00825              | Mon Jan 26 00:00:00 1970 PST
  826 |   6 | 00826              | Tue Jan 27 00:00:00 1970 PST
  827 |   7 | 00827              | Wed Jan 28 00:00:00 1970 PST
  828 |   8 | 00828              | Thu Jan 29 00:00:00 1970 PST
  829 |   9 | 00829              | Fri Jan 30 00:00:00 1970 PST
  830 |   0 | 00830              | Sat Jan 31 00:00:00 1970 PST
  831 |   1 | 00831              | Sun Feb 01 00:00:00 1970 PST
  832 |   2 | 00832              | Mon Feb 02 00:00:00 1970 PST
  833 | 303 | 00833_update3      | Tue Feb 03 00:00:00 1970 PST
  834 |   4 | 00834              | Wed Feb 04 00:00:00 1970 PST
  835 |   5 | 00835              | Thu Feb 05 00:00:00 1970 PST
  836 |   6 | 00836              | Fri Feb 06 00:00:00 1970 PST
  837 |   7 | 00837              | Sat Feb 07 00:00:00 1970 PST
  838 |   8 | 00838              | Sun Feb 08 00:00:00 1970 PST
  839 |   9 | 00839              | Mon Feb 09 00:00:00 1970 PST
  840 |   0 | 00840              | Tue Feb 10 00:00:00 1970 PST
  841 |   1 | 00841              | Wed Feb 11 00:00:00 1970 PST
  842 |   2 | 00842              | Thu Feb 12 00:00:00 1970 PST
  843 | 303 | 00843_update3      | Fri Feb 13 00:00:00 1970 PST
  844 |   4 | 00844              | Sat Feb 14 00:00:00 1970 PST
  845 |   5 | 00845              | Sun Feb 15 00:00:00 1970 PST
  846 |   6 | 00846              | Mon Feb 16 00:00:00 1970 PST
  847 |   7 | 00847              | Tue Feb 17 00:00:00 1970 PST
  848 |   8 | 00848              | Wed Feb 18 00:00:00 1970 PST
  849 |   9 | 00849              | Thu Feb 19 00:00:00 1970 PST
  850 |   0 | 00850              | Fri Feb 20 00:00:00 1970 PST
  851 |   1 | 00851              | Sat Feb 21 00:00:00 1970 PST
  852 |   2 | 00852              | Sun Feb 22 00:00:00 1970 PST
  853 | 303 | 00853_update3      | Mon Feb 23 00:00:00 1970 PST
  854 |   4 | 00854              | Tue Feb 24 00:00:00 1970 PST
  855 |   5 | 00855              | Wed Feb 25 00:00:00 1970 PST
  856 |   6 | 00856              | Thu Feb 26 00:00:00 1970 PST
  857 |   7 | 00857              | Fri Feb 27 00:00:00 1970 PST
  858 |   8 | 00858              | Sat Feb 28 00:00:00 1970 PST
  859 |   9 | 00859              | Sun Mar 01 00:00:00 1970 PST
  860 |   0 | 00860              | Mon Mar 02 00:00:00 1970 PST
  861 |   1 | 00861              | Tue Mar 03 00:00:00 1970 PST
  862 |   2 | 00862              | Wed Mar 04 00:00:00 1970 PST
  863 | 303 | 00863_update3      | Thu Mar 05 00:00:00 1970 PST
  864 |   4 | 00864              | Fri Mar 06 00:00:00 1970 PST
  865 |   5 | 00865              | Sat Mar 07 00:00:00 1970 PST
  866 |   6 | 00866              | Sun Mar 08 00:00:00 1970 PST
  867 |   7 | 00867              | Mon Mar 09 00:00:00 1970 PST
  868 |   8 | 00868              | Tue Mar 10 00:00:00 1970 PST
  869 |   9 | 00869              | Wed Mar 11 00:00:00 1970 PST
  870 |   0 | 00870              | Thu Mar 12 00:00:00 1970 PST
  871 |   1 | 00871              | Fri Mar 13 00:00:00 1970 PST
  872 |   2 | 00872              | Sat Mar 14 00:00:00 1970 PST
  873 | 303 | 00873_update3      | Sun Mar 15 00:00:00 1970 PST
  874 |   4 | 00874              | Mon Mar 16 00:00:00 1970 PST
  875 |   5 | 00875              | Tue Mar 17 00:00:00 1970 PST
  876 |   6 | 00876              | Wed Mar 18 00:00:00 1970 PST
  877 |   7 | 00877              | Thu Mar 19 00:00:00 1970 PST
  878 |   8 | 00878              | Fri Mar 20 00:00:00 1970 PST
  879 |   9 | 00879              | Sat Mar 21 00:00:00 1970 PST
  880 |   0 | 00880              | Sun Mar 22 00:00:00 1970 PST
  881 |   1 | 00881              | Mon Mar 23 00:00:00 1970 PST
  882 |   2 | 00882              | Tue Mar 24 00:00:00 1970 PST
  883 | 303 | 00883_update3      | Wed Mar 25 00:00:00 1970 PST
  884 |   4 | 00884              | Thu Mar 26 00:00:00 1970 PST
  885 |   5 | 00885              | Fri Mar 27 00:00:00 1970 PST
  886 |   6 | 00886              | Sat Mar 28 00:00:00 1970 PST
  887 |   7 | 00887              | Sun Mar 29 00:00:00 1970 PST
  888 |   8 | 00888              | Mon Mar 30 00:00:00 1970 PST
  889 |   9 | 00889              | Tue Mar 31 00:00:00 1970 PST
  890 |   0 | 00890              | Wed Apr 01 00:00:00 1970 PST
  891 |   1 | 00891              | Thu Apr 02 00:00:00 1970 PST
  892 |   2 | 00892              | Fri Apr 03 00:00:00 1970 PST
  893 | 303 | 00893_update3      | Sat Apr 04 00:00:00 1970 PST
  894 |   4 | 00894              | Sun Apr 05 00:00:00 1970 PST
  895 |   5 | 00895              | Mon Apr 06 00:00:00 1970 PST
  896 |   6 | 00896              | Tue Apr 07 00:00:00 1970 PST
  897 |   7 | 00897              | Wed Apr 08 00:00:00 1970 PST
  898 |   8 | 00898              | Thu Apr 09 00:00:00 1970 PST
  899 |   9 | 00899              | Fri Apr 10 00:00:00 1970 PST
  900 |   0 | 00900              | Thu Jan 01 00:00:00 1970 PST
  901 |   1 | 00901              | Fri Jan 02 00:00:00 1970 PST
  902 |   2 | 00902              | Sat Jan 03 00:00:00 1970 PST
  903 | 303 | 00903_update3      | Sun Jan 04 00:00:00 1970 PST
  904 |   4 | 00904              | Mon Jan 05 00:00:00 1970 PST
  905 |   5 | 00905              | Tue Jan 06 00:00:00 1970 PST
  906 |   6 | 00906              | Wed Jan 07 00:00:00 1970 PST
  907 |   7 | 00907              | Thu Jan 08 00:00:00 1970 PST
  908 |   8 | 00908              | Fri Jan 09 00:00:00 1970 PST
  909 |   9 | 00909              | Sat Jan 10 00:00:00 1970 PST
  910 |   0 | 00910              | Sun Jan 11 00:00:00 1970 PST
  911 |   1 | 00911              | Mon Jan 12 00:00:00 1970 PST
  912 |   2 | 00912              | Tue Jan 13 00:00:00 1970 PST
  913 | 303 | 00913_update3      | Wed Jan 14 00:00:00 1970 PST
  914 |   4 | 00914              | Thu Jan 15 00:00:00 1970 PST
  915 |   5 | 00915              | Fri Jan 16 00:00:00 1970 PST
  916 |   6 | 00916              | Sat Jan 17 00:00:00 1970 PST
  917 |   7 | 00917              | Sun Jan 18 00:00:00 1970 PST
  918 |   8 | 00918              | Mon Jan 19 00:00:00 1970 PST
  919 |   9 | 00919              | Tue Jan 20 00:00:00 1970 PST
  920 |   0 | 00920              | Wed Jan 21 00:00:00 1970 PST
  921 |   1 | 00921              | Thu Jan 22 00:00:00 1970 PST
  922 |   2 | 00922              | Fri Jan 23 00:00:00 1970 PST
  923 | 303 | 00923_update3      | Sat Jan 24 00:00:00 1970 PST
  924 |   4 | 00924              | Sun Jan 25 00:00:00 1970 PST
  925 |   5 | 00925              | Mon Jan 26 00:00:00 1970 PST
  926 |   6 | 00926              | Tue Jan 27 00:00:00 1970 PST
  927 |   7 | 00927              | Wed Jan 28 00:00:00 1970 PST
  928 |   8 | 00928              | Thu Jan 29 00:00:00 1970 PST
  929 |   9 | 00929              | Fri Jan 30 00:00:00 1970 PST
  930 |   0 | 00930              | Sat Jan 31 00:00:00 1970 PST
  931 |   1 | 00931              | Sun Feb 01 00:00:00 1970 PST
  932 |   2 | 00932              | Mon Feb 02 00:00:00 1970 PST
  933 | 303 | 00933_update3      | Tue Feb 03 00:00:00 1970 PST
  934 |   4 | 00934              | Wed Feb 04 00:00:00 1970 PST
  935 |   5 | 00935              | Thu Feb 05 00:00:00 1970 PST
  936 |   6 | 00936              | Fri Feb 06 00:00:00 1970 PST
  937 |   7 | 00937              | Sat Feb 07 00:00:00 1970 PST
  938 |   8 | 00938              | Sun Feb 08 00:00:00 1970 PST
  939 |   9 | 00939              | Mon Feb 09 00:00:00 1970 PST
  940 |   0 | 00940              | Tue Feb 10 00:00:00 1970 PST
  941 |   1 | 00941              | Wed Feb 11 00:00:00 1970 PST
  942 |   2 | 00942              | Thu Feb 12 00:00:00 1970 PST
  943 | 303 | 00943_update3      | Fri Feb 13 00:00:00 1970 PST
  944 |   4 | 00944              | Sat Feb 14 00:00:00 1970 PST
  945 |   5 | 00945              | Sun Feb 15 00:00:00 1970 PST
  946 |   6 | 00946              | Mon Feb 16 00:00:00 1970 PST
  947 |   7 | 00947              | Tue Feb 17 00:00:00 1970 PST
  948 |   8 | 00948              | Wed Feb 18 00:00:00 1970 PST
  949 |   9 | 00949              | Thu Feb 19 00:00:00 1970 PST
  950 |   0 | 00950              | Fri Feb 20 00:00:00 1970 PST
  951 |   1 | 00951              | Sat Feb 21 00:00:00 1970 PST
  952 |   2 | 00952              | Sun Feb 22 00:00:00 1970 PST
  953 | 303 | 00953_update3      | Mon Feb 23 00:00:00 1970 PST
  954 |   4 | 00954              | Tue Feb 24 00:00:00 1970 PST
  955 |   5 | 00955              | Wed Feb 25 00:00:00 1970 PST
  956 |   6 | 00956              | Thu Feb 26 00:00:00 1970 PST
  957 |   7 | 00957              | Fri Feb 27 00:00:00 1970 PST
  958 |   8 | 00958              | Sat Feb 28 00:00:00 1970 PST
  959 |   9 | 00959              | Sun Mar 01 00:00:00 1970 PST
  960 |   0 | 00960              | Mon Mar 02 00:00:00 1970 PST
  961 |   1 | 00961              | Tue Mar 03 00:00:00 1970 PST
  962 |   2 | 00962              | Wed Mar 04 00:00:00 1970 PST
  963 | 303 | 00963_update3      | Thu Mar 05 00:00:00 1970 PST
  964 |   4 | 00964              | Fri Mar 06 00:00:00 1970 PST
  965 |   5 | 00965              | Sat Mar 07 00:00:00 1970 PST
  966 |   6 | 00966              | Sun Mar 08 00:00:00 1970 PST
  967 |   7 | 00967              | Mon Mar 09 00:00:00 1970 PST
  968 |   8 | 00968              | Tue Mar 10 00:00:00 1970 PST
  969 |   9 | 00969              | Wed Mar 11 00:00:00 1970 PST
  970 |   0 | 00970              | Thu Mar 12 00:00:00 1970 PST
  971 |   1 | 00971              | Fri Mar 13 00:00:00 1970 PST
  972 |   2 | 00972              | Sat Mar 14 00:00:00 1970 PST
  973 | 303 | 00973_update3      | Sun Mar 15 00:00:00 1970 PST
  974 |   4 | 00974              | Mon Mar 16 00:00:00 1970 PST
  975 |   5 | 00975              | Tue Mar 17 00:00:00 1970 PST
  976 |   6 | 00976              | Wed Mar 18 00:00:00 1970 PST
  977 |   7 | 00977              | Thu Mar 19 00:00:00 1970 PST
  978 |   8 | 00978              | Fri Mar 20 00:00:00 1970 PST
  979 |   9 | 00979              | Sat Mar 21 00:00:00 1970 PST
  980 |   0 | 00980              | Sun Mar 22 00:00:00 1970 PST
  981 |   1 | 00981              | Mon Mar 23 00:00:00 1970 PST
  982 |   2 | 00982              | Tue Mar 24 00:00:00 1970 PST
  983 | 303 | 00983_update3      | Wed Mar 25 00:00:00 1970 PST
  984 |   4 | 00984              | Thu Mar 26 00:00:00 1970 PST
  985 |   5 | 00985              | Fri Mar 27 00:00:00 1970 PST
  986 |   6 | 00986              | Sat Mar 28 00:00:00 1970 PST
  987 |   7 | 00987              | Sun Mar 29 00:00:00 1970 PST
  988 |   8 | 00988              | Mon Mar 30 00:00:00 1970 PST
  989 |   9 | 00989              | Tue Mar 31 00:00:00 1970 PST
  990 |   0 | 00990              | Wed Apr 01 00:00:00 1970 PST
  991 |   1 | 00991              | Thu Apr 02 00:00:00 1970 PST
  992 |   2 | 00992              | Fri Apr 03 00:00:00 1970 PST
  993 | 303 | 00993_update3      | Sat Apr 04 00:00:00 1970 PST
  994 |   4 | 00994              | Sun Apr 05 00:00:00 1970 PST
  995 |   5 | 00995              | Mon Apr 06 00:00:00 1970 PST
  996 |   6 | 00996              | Tue Apr 07 00:00:00 1970 PST
  997 |   7 | 00997              | Wed Apr 08 00:00:00 1970 PST
  998 |   8 | 00998              | Thu Apr 09 00:00:00 1970 PST
  999 |   9 | 00999              | Fri Apr 10 00:00:00 1970 PST
 1000 |   0 | 01000              | Thu Jan 01 00:00:00 1970 PST
 1001 | 101 | 0000100001         | 
 1002 | 102 | 0000200002         | 
 1003 | 403 | 0000300003_update3 | 
 1004 | 104 | 0000400004         | 
 1005 | 105 | 0000500005         | 
 1006 | 106 | 0000600006         | 
 1007 | 107 | 0000700007         | 
 1008 | 108 | 0000800008         | 
 1009 | 109 | 0000900009         | 
 1010 | 100 | 0001000010         | 
 1011 | 101 | 0001100011         | 
 1012 | 102 | 0001200012         | 
 1013 | 403 | 0001300013_update3 | 
 1014 | 104 | 0001400014         | 
 1015 | 105 | 0001500015         | 
 1016 | 106 | 0001600016         | 
 1017 | 107 | 0001700017         | 
 1018 | 108 | 0001800018         | 
 1019 | 109 | 0001900019         | 
 1020 | 100 | 0002000020         | 
 1104 | 204 | ddd                | 
 1105 | 205 | eee                | 
(1022 rows)

-- Test errors thrown on remote side during update
ALTER TABLE "S 1"."T 1" ADD CONSTRAINT c2positive CHECK (c2 >= 0);
INSERT INTO ft1(c1, c2) VALUES(11, 12);  -- duplicate key
ERROR:  ERROR: duplicate key value violates unique constraint "t1_pkey";
Error while executing the query
INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT DO NOTHING; -- works
ERROR:  ERROR: syntax error at or near "ON";
Error while executing the query
INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO NOTHING; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO UPDATE SET c3 = 'ffg'; -- unsupported
ERROR:  there is no unique or exclusion constraint matching the ON CONFLICT specification
INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  ERROR: new row for relation "T 1" violates check constraint "c2positive";
Error while executing the query
UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  ERROR: new row for relation "T 1" violates check constraint "c2positive";
Error while executing the query
-- Test savepoint/rollback behavior
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   0 |   100
   1 |   100
   2 |   100
   4 |   100
   5 |   100
   6 |   100
   7 |   100
   8 |   100
   9 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   0 |   100
   1 |   100
   2 |   100
   4 |   100
   5 |   100
   6 |   100
   7 |   100
   8 |   100
   9 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

begin;
update ft2 set c2 = 42 where c2 = 0;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   4 |   100
   5 |   100
   6 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

savepoint s1;
update ft2 set c2 = 44 where c2 = 4;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   6 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

release savepoint s1;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   6 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

savepoint s2;
update ft2 set c2 = 46 where c2 = 6;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

rollback to savepoint s2;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

release savepoint s2;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

savepoint s3;
update ft2 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
ERROR:  ERROR: new row for relation "T 1" violates check constraint "c2positive";
Error while executing the query
rollback to savepoint s3;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

release savepoint s3;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

-- none of the above is committed yet remotely
select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

commit;
select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
 c2  | count 
-----+-------
   1 |   100
   2 |   100
   5 |   100
   7 |   100
   8 |   100
   9 |   100
  42 |   100
  44 |   100
  46 |   100
 100 |     2
 101 |     2
 102 |     2
 104 |     2
 105 |     2
 106 |     2
 107 |     2
 108 |     2
 109 |     2
 204 |     1
 205 |     1
 303 |   100
 403 |     2
(22 rows)

-- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- FIRST behavior here.
-- ORDER BY DESC NULLS LAST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795 LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7
   ->  Foreign Scan on public.ft1
         Output: c1, c2, c3, c4, c5, c6, c7
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" ORDER BY c6 DESC, c1 ASC
(5 rows)

SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     
-----+----+-------+------------------------------+--------------------------+----+------------
 732 |  2 | 00732 | Mon Feb 02 00:00:00 1970 PST | Mon Feb 02 00:00:00 1970 | 2  | 2         
 742 |  2 | 00742 | Thu Feb 12 00:00:00 1970 PST | Thu Feb 12 00:00:00 1970 | 2  | 2         
 752 |  2 | 00752 | Sun Feb 22 00:00:00 1970 PST | Sun Feb 22 00:00:00 1970 | 2  | 2         
 762 |  2 | 00762 | Wed Mar 04 00:00:00 1970 PST | Wed Mar 04 00:00:00 1970 | 2  | 2         
 772 |  2 | 00772 | Sat Mar 14 00:00:00 1970 PST | Sat Mar 14 00:00:00 1970 | 2  | 2         
 782 |  2 | 00782 | Tue Mar 24 00:00:00 1970 PST | Tue Mar 24 00:00:00 1970 | 2  | 2         
 792 |  2 | 00792 | Fri Apr 03 00:00:00 1970 PST | Fri Apr 03 00:00:00 1970 | 2  | 2         
 802 |  2 | 00802 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2         
 812 |  2 | 00812 | Tue Jan 13 00:00:00 1970 PST | Tue Jan 13 00:00:00 1970 | 2  | 2         
 822 |  2 | 00822 | Fri Jan 23 00:00:00 1970 PST | Fri Jan 23 00:00:00 1970 | 2  | 2         
(10 rows)

-- ORDER BY DESC NULLS FIRST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7
   ->  Foreign Scan on public.ft1
         Output: c1, c2, c3, c4, c5, c6, c7
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" ORDER BY c6 DESC, c1 ASC
(5 rows)

SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
  c1  | c2  |     c3     |              c4              |            c5            | c6 |     c7     
------+-----+------------+------------------------------+--------------------------+----+------------
 1016 | 106 | 0001600016 |                              |                          |    | ft2       
 1017 | 107 | 0001700017 |                              |                          |    | ft2       
 1018 | 108 | 0001800018 |                              |                          |    | ft2       
 1019 | 109 | 0001900019 |                              |                          |    | ft2       
 1020 | 100 | 0002000020 |                              |                          |    | ft2       
 1104 | 204 | ddd        |                              |                          |    | ft2       
 1105 | 205 | eee        |                              |                          |    | ft2       
    9 |   9 | 00009      | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9         
   19 |   9 | 00019      | Tue Jan 20 00:00:00 1970 PST | Tue Jan 20 00:00:00 1970 | 9  | 9         
   29 |   9 | 00029      | Fri Jan 30 00:00:00 1970 PST | Fri Jan 30 00:00:00 1970 | 9  | 9         
(10 rows)

-- ORDER BY ASC NULLS FIRST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7
   ->  Foreign Scan on public.ft1
         Output: c1, c2, c3, c4, c5, c6, c7
         Remote SQL: SELECT c1, c2, c3, c4, c5, c6, c7 FROM "S 1"."T 1" ORDER BY c6 ASC, c1 ASC
(5 rows)

SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     
-----+----+-------+------------------------------+--------------------------+----+------------
 160 | 42 | 00160 | Mon Mar 02 00:00:00 1970 PST | Mon Mar 02 00:00:00 1970 | 0  | 0         
 170 | 42 | 00170 | Thu Mar 12 00:00:00 1970 PST | Thu Mar 12 00:00:00 1970 | 0  | 0         
 180 | 42 | 00180 | Sun Mar 22 00:00:00 1970 PST | Sun Mar 22 00:00:00 1970 | 0  | 0         
 190 | 42 | 00190 | Wed Apr 01 00:00:00 1970 PST | Wed Apr 01 00:00:00 1970 | 0  | 0         
 200 | 42 | 00200 | Thu Jan 01 00:00:00 1970 PST | Thu Jan 01 00:00:00 1970 | 0  | 0         
 210 | 42 | 00210 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0         
 220 | 42 | 00220 | Wed Jan 21 00:00:00 1970 PST | Wed Jan 21 00:00:00 1970 | 0  | 0         
 230 | 42 | 00230 | Sat Jan 31 00:00:00 1970 PST | Sat Jan 31 00:00:00 1970 | 0  | 0         
 240 | 42 | 00240 | Tue Feb 10 00:00:00 1970 PST | Tue Feb 10 00:00:00 1970 | 0  | 0         
 250 | 42 | 00250 | Fri Feb 20 00:00:00 1970 PST | Fri Feb 20 00:00:00 1970 | 0  | 0         
(10 rows)

-- ===================================================================
-- test check constraints
-- ===================================================================
-- Consistent check constraints provide consistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2positive CHECK (c2 >= 0);
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Foreign Scan on public.ft1
         Remote SQL: SELECT NULL FROM "S 1"."T 1" WHERE ((c2 < 0))
(4 rows)

SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

SET constraint_exclusion = 'on';
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- check constraint is enforced on the remote side, not locally
INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
ERROR:  ERROR: new row for relation "T 1" violates check constraint "c2positive";
Error while executing the query
UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ERROR:  ERROR: new row for relation "T 1" violates check constraint "c2positive";
Error while executing the query
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2positive;
-- But inconsistent check constraints provide inconsistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2negative CHECK (c2 < 0);
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Foreign Scan on public.ft1
         Remote SQL: SELECT NULL FROM "S 1"."T 1" WHERE ((c2 >= 0))
(4 rows)

SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
  1022
(1 row)

SET constraint_exclusion = 'on';
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- local check constraint is not actually enforced
INSERT INTO ft1(c1, c2) VALUES(1111, 2);
UPDATE ft1 SET c2 = c2 + 1 WHERE c1 = 1;
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2negative;
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
CREATE SCHEMA import_source;
CREATE TABLE import_source.t1 (c1 int, c2 varchar NOT NULL);
CREATE TABLE import_source.t2 (c1 int default 42, c2 varchar NULL, c3 text collate "POSIX");
CREATE TYPE typ1 AS (m1 int, m2 varchar);
CREATE TABLE import_source.t3 (c1 timestamptz default now(), c2 typ1);
CREATE TABLE import_source."x 4" (c1 float8, "C 2" text, c3 varchar(42));
CREATE TABLE import_source."x 5" (c1 float8);
ALTER TABLE import_source."x 5" DROP COLUMN c1;
CREATE SCHEMA import_dest1;
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest1;
\det+ import_dest1.*
                                 List of foreign tables
    Schema    | Table |  Server  |               FDW Options               | Description 
--------------+-------+----------+-----------------------------------------+-------------
 import_dest1 | t1    | loopback | ("table" 't1', schema 'import_source')  | 
 import_dest1 | t2    | loopback | ("table" 't2', schema 'import_source')  | 
 import_dest1 | t3    | loopback | ("table" 't3', schema 'import_source')  | 
 import_dest1 | x 4   | loopback | ("table" 'x 4', schema 'import_source') | 
 import_dest1 | x 5   | loopback | ("table" 'x 5', schema 'import_source') | 
(5 rows)

\d import_dest1.*
              Foreign table "import_dest1.t1"
 Column |          Type          | Modifiers | FDW Options 
--------+------------------------+-----------+-------------
 c1     | integer                |           | 
 c2     | character varying(255) |           | 
Server: loopback
FDW Options: ("table" 't1', schema 'import_source')

              Foreign table "import_dest1.t2"
 Column |          Type          | Modifiers | FDW Options 
--------+------------------------+-----------+-------------
 c1     | integer                |           | 
 c2     | character varying(255) |           | 
 c3     | text                   |           | 
Server: loopback
FDW Options: ("table" 't2', schema 'import_source')

                Foreign table "import_dest1.t3"
 Column |            Type             | Modifiers | FDW Options 
--------+-----------------------------+-----------+-------------
 c1     | timestamp without time zone |           | 
 c2     | character varying(255)      |           | 
Server: loopback
FDW Options: ("table" 't3', schema 'import_source')

             Foreign table "import_dest1.x 4"
 Column |         Type          | Modifiers | FDW Options 
--------+-----------------------+-----------+-------------
 c1     | real                  |           | 
 C 2    | text                  |           | 
 c3     | character varying(42) |           | 
Server: loopback
FDW Options: ("table" 'x 4', schema 'import_source')

    Foreign table "import_dest1.x 5"
 Column | Type | Modifiers | FDW Options 
--------+------+-----------+-------------
Server: loopback
FDW Options: ("table" 'x 5', schema 'import_source')

-- Options
CREATE SCHEMA import_dest2;
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest2
  OPTIONS (import_default 'true');
\det+ import_dest2.*
                                                            List of foreign tables
    Schema    | Table |  Server  |                                         FDW Options                                          | Description 
--------------+-------+----------+----------------------------------------------------------------------------------------------+-------------
 import_dest2 | t1    | loopback | (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 't1', schema 'import_source')  | 
 import_dest2 | t2    | loopback | (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 't2', schema 'import_source')  | 
 import_dest2 | t3    | loopback | (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 't3', schema 'import_source')  | 
 import_dest2 | x 4   | loopback | (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 'x 4', schema 'import_source') | 
 import_dest2 | x 5   | loopback | (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 'x 5', schema 'import_source') | 
(5 rows)

\d import_dest2.*
              Foreign table "import_dest2.t1"
 Column |          Type          | Modifiers | FDW Options 
--------+------------------------+-----------+-------------
 c1     | integer                |           | 
 c2     | character varying(255) |           | 
Server: loopback
FDW Options: (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 't1', schema 'import_source')

              Foreign table "import_dest2.t2"
 Column |          Type          | Modifiers | FDW Options 
--------+------------------------+-----------+-------------
 c1     | integer                |           | 
 c2     | character varying(255) |           | 
 c3     | text                   |           | 
Server: loopback
FDW Options: (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 't2', schema 'import_source')

                Foreign table "import_dest2.t3"
 Column |            Type             | Modifiers | FDW Options 
--------+-----------------------------+-----------+-------------
 c1     | timestamp without time zone |           | 
 c2     | character varying(255)      |           | 
Server: loopback
FDW Options: (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 't3', schema 'import_source')

             Foreign table "import_dest2.x 4"
 Column |         Type          | Modifiers | FDW Options 
--------+-----------------------+-----------+-------------
 c1     | real                  |           | 
 C 2    | text                  |           | 
 c3     | character varying(42) |           | 
Server: loopback
FDW Options: (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 'x 4', schema 'import_source')

    Foreign table "import_dest2.x 5"
 Column | Type | Modifiers | FDW Options 
--------+------+-----------+-------------
Server: loopback
FDW Options: (import_default 'true', dsn 'REMOTE_PG', odbc_pwd '', "table" 'x 5', schema 'import_source')

CREATE SCHEMA import_dest3;
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest3
  OPTIONS (import_collate 'false', import_not_null 'false');
\det+ import_dest3.*
                                                                         List of foreign tables
    Schema    | Table |  Server  |                                                      FDW Options                                                       | Description 
--------------+-------+----------+------------------------------------------------------------------------------------------------------------------------+-------------
 import_dest3 | t1    | loopback | (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 't1', schema 'import_source')  | 
 import_dest3 | t2    | loopback | (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 't2', schema 'import_source')  | 
 import_dest3 | t3    | loopback | (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 't3', schema 'import_source')  | 
 import_dest3 | x 4   | loopback | (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 'x 4', schema 'import_source') | 
 import_dest3 | x 5   | loopback | (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 'x 5', schema 'import_source') | 
(5 rows)

\d import_dest3.*
              Foreign table "import_dest3.t1"
 Column |          Type          | Modifiers | FDW Options 
--------+------------------------+-----------+-------------
 c1     | integer                |           | 
 c2     | character varying(255) |           | 
Server: loopback
FDW Options: (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 't1', schema 'import_source')

              Foreign table "import_dest3.t2"
 Column |          Type          | Modifiers | FDW Options 
--------+------------------------+-----------+-------------
 c1     | integer                |           | 
 c2     | character varying(255) |           | 
 c3     | text                   |           | 
Server: loopback
FDW Options: (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 't2', schema 'import_source')

                Foreign table "import_dest3.t3"
 Column |            Type             | Modifiers | FDW Options 
--------+-----------------------------+-----------+-------------
 c1     | timestamp without time zone |           | 
 c2     | character varying(255)      |           | 
Server: loopback
FDW Options: (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 't3', schema 'import_source')

             Foreign table "import_dest3.x 4"
 Column |         Type          | Modifiers | FDW Options 
--------+-----------------------+-----------+-------------
 c1     | real                  |           | 
 C 2    | text                  |           | 
 c3     | character varying(42) |           | 
Server: loopback
FDW Options: (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 'x 4', schema 'import_source')

    Foreign table "import_dest3.x 5"
 Column | Type | Modifiers | FDW Options 
--------+------+-----------+-------------
Server: loopback
FDW Options: (import_collate 'false', import_not_null 'false', dsn 'REMOTE_PG', odbc_pwd '', "table" 'x 5', schema 'import_source')

-- Check LIMIT TO and EXCEPT
CREATE SCHEMA import_dest4;
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t1, nonesuch)
  FROM SERVER loopback INTO import_dest4;
\det+ import_dest4.*
                                     List of foreign tables
    Schema    |  Table   |  Server  |                 FDW Options                  | Description 
--------------+----------+----------+----------------------------------------------+-------------
 import_dest4 | nonesuch | loopback | ("table" 'nonesuch', schema 'import_source') | 
 import_dest4 | t1       | loopback | ("table" 't1', schema 'import_source')       | 
(2 rows)

IMPORT FOREIGN SCHEMA import_source EXCEPT (t1, "x 4", nonesuch)
  FROM SERVER loopback INTO import_dest4;
\det+ import_dest4.*
                                     List of foreign tables
    Schema    |  Table   |  Server  |                 FDW Options                  | Description 
--------------+----------+----------+----------------------------------------------+-------------
 import_dest4 | nonesuch | loopback | ("table" 'nonesuch', schema 'import_source') | 
 import_dest4 | t1       | loopback | ("table" 't1', schema 'import_source')       | 
 import_dest4 | t2       | loopback | ("table" 't2', schema 'import_source')       | 
 import_dest4 | t3       | loopback | ("table" 't3', schema 'import_source')       | 
 import_dest4 | x 5      | loopback | ("table" 'x 5', schema 'import_source')      | 
(5 rows)

-- Assorted error cases
IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest4;
ERROR:  relation "t1" already exists
CONTEXT:  importing foreign table "t1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER loopback INTO import_dest4;
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER loopback INTO notthere;
ERROR:  schema "notthere" does not exist
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere;
ERROR:  server "nowhere" does not exist
-- Check case of a type present only on the remote server.
-- We can fake this by dropping the type locally in our transaction.
CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
CREATE TABLE import_source.t5 (c1 int, c2 text collate "C", "Col" "Colors");
CREATE SCHEMA import_dest5;
BEGIN;
DROP TYPE "Colors" CASCADE;
NOTICE:  drop cascades to table import_source.t5 column Col
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t5)
  FROM SERVER loopback INTO import_dest5;  -- ERROR
ROLLBACK;
